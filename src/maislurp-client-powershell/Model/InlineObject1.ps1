#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Byte array request body

.PARAMETER Short
No description available.
.PARAMETER Char
No description available.
.PARAMETER Int
No description available.
.PARAMETER Long
No description available.
.PARAMETER Float
No description available.
.PARAMETER Double
No description available.
.PARAMETER Direct
No description available.
.PARAMETER ReadOnly
No description available.
.OUTPUTS

InlineObject1<PSCustomObject>
#>

function Initialize-InlineObject1 {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Short},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Char},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Int},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Long},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Float},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Double},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Direct},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReadOnly}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => InlineObject1' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "short" = ${Short}
            "char" = ${Char}
            "int" = ${Int}
            "long" = ${Long}
            "float" = ${Float}
            "double" = ${Double}
            "direct" = ${Direct}
            "readOnly" = ${ReadOnly}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InlineObject1<PSCustomObject>

.DESCRIPTION

Convert from JSON to InlineObject1<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InlineObject1<PSCustomObject>
#>
function ConvertFrom-JsonToInlineObject1 {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => InlineObject1' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InlineObject1
        $AllProperties = ("short", "char", "int", "long", "float", "double", "direct", "readOnly")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "short"))) { #optional property not found
            $Short = $null
        } else {
            $Short = $JsonParameters.PSobject.Properties["short"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "char"))) { #optional property not found
            $Char = $null
        } else {
            $Char = $JsonParameters.PSobject.Properties["char"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "int"))) { #optional property not found
            $Int = $null
        } else {
            $Int = $JsonParameters.PSobject.Properties["int"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "long"))) { #optional property not found
            $Long = $null
        } else {
            $Long = $JsonParameters.PSobject.Properties["long"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "float"))) { #optional property not found
            $Float = $null
        } else {
            $Float = $JsonParameters.PSobject.Properties["float"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "double"))) { #optional property not found
            $Double = $null
        } else {
            $Double = $JsonParameters.PSobject.Properties["double"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direct"))) { #optional property not found
            $Direct = $null
        } else {
            $Direct = $JsonParameters.PSobject.Properties["direct"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readOnly"))) { #optional property not found
            $ReadOnly = $null
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["readOnly"].value
        }

        $PSO = [PSCustomObject]@{
            "short" = ${Short}
            "char" = ${Char}
            "int" = ${Int}
            "long" = ${Long}
            "float" = ${Float}
            "double" = ${Double}
            "direct" = ${Direct}
            "readOnly" = ${ReadOnly}
        }

        return $PSO
    }

}

