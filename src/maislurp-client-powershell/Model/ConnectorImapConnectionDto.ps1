#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConnectorId
No description available.
.PARAMETER ImapHost
No description available.
.PARAMETER ImapPort
No description available.
.PARAMETER ImapUsername
No description available.
.PARAMETER ImapPassword
No description available.
.PARAMETER ImapSsl
No description available.
.PARAMETER SelectFolder
No description available.
.PARAMETER SearchTerms
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER Id
No description available.
.OUTPUTS

ConnectorImapConnectionDto<PSCustomObject>
#>

function Initialize-ConnectorImapConnectionDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectorId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImapPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ImapSsl},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelectFolder},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchTerms},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ConnectorImapConnectionDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ConnectorId -eq $null) {
            throw "invalid value for 'ConnectorId', 'ConnectorId' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "connectorId" = ${ConnectorId}
            "imapHost" = ${ImapHost}
            "imapPort" = ${ImapPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapSsl" = ${ImapSsl}
            "selectFolder" = ${SelectFolder}
            "searchTerms" = ${SearchTerms}
            "enabled" = ${Enabled}
            "createdAt" = ${CreatedAt}
            "id" = ${Id}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorImapConnectionDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorImapConnectionDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorImapConnectionDto<PSCustomObject>
#>
function ConvertFrom-JsonToConnectorImapConnectionDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ConnectorImapConnectionDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConnectorImapConnectionDto
        $AllProperties = ("connectorId", "imapHost", "imapPort", "imapUsername", "imapPassword", "imapSsl", "selectFolder", "searchTerms", "enabled", "createdAt", "id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'connectorId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectorId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connectorId' missing."
        } else {
            $ConnectorId = $JsonParameters.PSobject.Properties["connectorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapHost"))) { #optional property not found
            $ImapHost = $null
        } else {
            $ImapHost = $JsonParameters.PSobject.Properties["imapHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPort"))) { #optional property not found
            $ImapPort = $null
        } else {
            $ImapPort = $JsonParameters.PSobject.Properties["imapPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) { #optional property not found
            $ImapUsername = $null
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) { #optional property not found
            $ImapPassword = $null
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapSsl"))) { #optional property not found
            $ImapSsl = $null
        } else {
            $ImapSsl = $JsonParameters.PSobject.Properties["imapSsl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selectFolder"))) { #optional property not found
            $SelectFolder = $null
        } else {
            $SelectFolder = $JsonParameters.PSobject.Properties["selectFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchTerms"))) { #optional property not found
            $SearchTerms = $null
        } else {
            $SearchTerms = $JsonParameters.PSobject.Properties["searchTerms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "connectorId" = ${ConnectorId}
            "imapHost" = ${ImapHost}
            "imapPort" = ${ImapPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapSsl" = ${ImapSsl}
            "selectFolder" = ${SelectFolder}
            "searchTerms" = ${SearchTerms}
            "enabled" = ${Enabled}
            "createdAt" = ${CreatedAt}
            "id" = ${Id}
        }

        return $PSO
    }

}

