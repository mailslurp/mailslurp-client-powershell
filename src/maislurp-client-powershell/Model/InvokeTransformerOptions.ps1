#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AiTransformId
No description available.
.PARAMETER AiTransformMappingId
No description available.
.PARAMETER RawInput
No description available.
.PARAMETER EntityId
No description available.
.PARAMETER EntityType
No description available.
.PARAMETER RawConditions
No description available.
.PARAMETER RawInstructions
No description available.
.PARAMETER RawOutputSchema
No description available.
.PARAMETER ContentSelector
No description available.
.OUTPUTS

InvokeTransformerOptions<PSCustomObject>
#>

function Initialize-InvokeTransformerOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AiTransformId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AiTransformMappingId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawInput},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntityId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EMAIL", "SMS", "ATTACHMENT")]
        [String]
        ${EntityType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RawConditions},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RawInstructions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RawOutputSchema},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RAW", "BODY", "BODY_ATTACHMENTS")]
        [String]
        ${ContentSelector}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => InvokeTransformerOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "aiTransformId" = ${AiTransformId}
            "aiTransformMappingId" = ${AiTransformMappingId}
            "rawInput" = ${RawInput}
            "entityId" = ${EntityId}
            "entityType" = ${EntityType}
            "rawConditions" = ${RawConditions}
            "rawInstructions" = ${RawInstructions}
            "rawOutputSchema" = ${RawOutputSchema}
            "contentSelector" = ${ContentSelector}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InvokeTransformerOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to InvokeTransformerOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InvokeTransformerOptions<PSCustomObject>
#>
function ConvertFrom-JsonToInvokeTransformerOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => InvokeTransformerOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InvokeTransformerOptions
        $AllProperties = ("aiTransformId", "aiTransformMappingId", "rawInput", "entityId", "entityType", "rawConditions", "rawInstructions", "rawOutputSchema", "contentSelector")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "aiTransformId"))) { #optional property not found
            $AiTransformId = $null
        } else {
            $AiTransformId = $JsonParameters.PSobject.Properties["aiTransformId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "aiTransformMappingId"))) { #optional property not found
            $AiTransformMappingId = $null
        } else {
            $AiTransformMappingId = $JsonParameters.PSobject.Properties["aiTransformMappingId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawInput"))) { #optional property not found
            $RawInput = $null
        } else {
            $RawInput = $JsonParameters.PSobject.Properties["rawInput"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entityId"))) { #optional property not found
            $EntityId = $null
        } else {
            $EntityId = $JsonParameters.PSobject.Properties["entityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entityType"))) { #optional property not found
            $EntityType = $null
        } else {
            $EntityType = $JsonParameters.PSobject.Properties["entityType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawConditions"))) { #optional property not found
            $RawConditions = $null
        } else {
            $RawConditions = $JsonParameters.PSobject.Properties["rawConditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawInstructions"))) { #optional property not found
            $RawInstructions = $null
        } else {
            $RawInstructions = $JsonParameters.PSobject.Properties["rawInstructions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawOutputSchema"))) { #optional property not found
            $RawOutputSchema = $null
        } else {
            $RawOutputSchema = $JsonParameters.PSobject.Properties["rawOutputSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentSelector"))) { #optional property not found
            $ContentSelector = $null
        } else {
            $ContentSelector = $JsonParameters.PSobject.Properties["contentSelector"].value
        }

        $PSO = [PSCustomObject]@{
            "aiTransformId" = ${AiTransformId}
            "aiTransformMappingId" = ${AiTransformMappingId}
            "rawInput" = ${RawInput}
            "entityId" = ${EntityId}
            "entityType" = ${EntityType}
            "rawConditions" = ${RawConditions}
            "rawInstructions" = ${RawInstructions}
            "rawOutputSchema" = ${RawOutputSchema}
            "contentSelector" = ${ContentSelector}
        }

        return $PSO
    }

}

