#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Expiration defaults for your account

.PARAMETER DefaultExpirationMillis
No description available.
.PARAMETER MaxExpirationMillis
No description available.
.PARAMETER DefaultExpiresAt
No description available.
.PARAMETER CanPermanentInbox
No description available.
.PARAMETER NextInboxAllowsPermanent
No description available.
.OUTPUTS

ExpirationDefaults<PSCustomObject>
#>

function Initialize-ExpirationDefaults {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultExpirationMillis},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxExpirationMillis},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DefaultExpiresAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanPermanentInbox},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NextInboxAllowsPermanent}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ExpirationDefaults' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "defaultExpirationMillis" = ${DefaultExpirationMillis}
            "maxExpirationMillis" = ${MaxExpirationMillis}
            "defaultExpiresAt" = ${DefaultExpiresAt}
            "canPermanentInbox" = ${CanPermanentInbox}
            "nextInboxAllowsPermanent" = ${NextInboxAllowsPermanent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExpirationDefaults<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExpirationDefaults<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExpirationDefaults<PSCustomObject>
#>
function ConvertFrom-JsonToExpirationDefaults {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ExpirationDefaults' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExpirationDefaults
        $AllProperties = ("defaultExpirationMillis", "maxExpirationMillis", "defaultExpiresAt", "canPermanentInbox", "nextInboxAllowsPermanent")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultExpirationMillis"))) { #optional property not found
            $DefaultExpirationMillis = $null
        } else {
            $DefaultExpirationMillis = $JsonParameters.PSobject.Properties["defaultExpirationMillis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxExpirationMillis"))) { #optional property not found
            $MaxExpirationMillis = $null
        } else {
            $MaxExpirationMillis = $JsonParameters.PSobject.Properties["maxExpirationMillis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultExpiresAt"))) { #optional property not found
            $DefaultExpiresAt = $null
        } else {
            $DefaultExpiresAt = $JsonParameters.PSobject.Properties["defaultExpiresAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canPermanentInbox"))) { #optional property not found
            $CanPermanentInbox = $null
        } else {
            $CanPermanentInbox = $JsonParameters.PSobject.Properties["canPermanentInbox"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextInboxAllowsPermanent"))) { #optional property not found
            $NextInboxAllowsPermanent = $null
        } else {
            $NextInboxAllowsPermanent = $JsonParameters.PSobject.Properties["nextInboxAllowsPermanent"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultExpirationMillis" = ${DefaultExpirationMillis}
            "maxExpirationMillis" = ${MaxExpirationMillis}
            "defaultExpiresAt" = ${DefaultExpiresAt}
            "canPermanentInbox" = ${CanPermanentInbox}
            "nextInboxAllowsPermanent" = ${NextInboxAllowsPermanent}
        }

        return $PSO
    }

}

