#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
The mailbox name.
.PARAMETER ReadOnly
True if the mailbox is open in read-only mode.
.PARAMETER Items
Results map
.PARAMETER Flags
The mailbox flags.
.PARAMETER PermanentFlags
The mailbox permanent flags.
.PARAMETER UnseenSeqNum
The sequence number of the first unseen message in the mailbox.
.PARAMETER Messages
The number of messages in this mailbox.
.PARAMETER Recent
The number of messages not seen since the last time the mailbox was opened.
.PARAMETER Unseen
The number of unread messages.
.PARAMETER UidNext
The next UID.
.PARAMETER UidValidity
Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.
.PARAMETER AppendLimit
Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension
.OUTPUTS

ImapMailboxStatus<PSCustomObject>
#>

function Initialize-ImapMailboxStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ReadOnly},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Items},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Flags},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PermanentFlags},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${UnseenSeqNum},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Messages},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Recent},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Unseen},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${UidNext},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${UidValidity},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AppendLimit}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ImapMailboxStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($ReadOnly -eq $null) {
            throw "invalid value for 'ReadOnly', 'ReadOnly' cannot be null."
        }

        if ($UnseenSeqNum -eq $null) {
            throw "invalid value for 'UnseenSeqNum', 'UnseenSeqNum' cannot be null."
        }

        if ($Messages -eq $null) {
            throw "invalid value for 'Messages', 'Messages' cannot be null."
        }

        if ($Recent -eq $null) {
            throw "invalid value for 'Recent', 'Recent' cannot be null."
        }

        if ($Unseen -eq $null) {
            throw "invalid value for 'Unseen', 'Unseen' cannot be null."
        }

        if ($UidNext -eq $null) {
            throw "invalid value for 'UidNext', 'UidNext' cannot be null."
        }

        if ($UidValidity -eq $null) {
            throw "invalid value for 'UidValidity', 'UidValidity' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "readOnly" = ${ReadOnly}
            "items" = ${Items}
            "flags" = ${Flags}
            "permanentFlags" = ${PermanentFlags}
            "unseenSeqNum" = ${UnseenSeqNum}
            "messages" = ${Messages}
            "recent" = ${Recent}
            "unseen" = ${Unseen}
            "uidNext" = ${UidNext}
            "uidValidity" = ${UidValidity}
            "appendLimit" = ${AppendLimit}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImapMailboxStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImapMailboxStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImapMailboxStatus<PSCustomObject>
#>
function ConvertFrom-JsonToImapMailboxStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ImapMailboxStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImapMailboxStatus
        $AllProperties = ("name", "readOnly", "items", "flags", "permanentFlags", "unseenSeqNum", "messages", "recent", "unseen", "uidNext", "uidValidity", "appendLimit")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readOnly"))) {
            throw "Error! JSON cannot be serialized due to the required property 'readOnly' missing."
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["readOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) {
            throw "Error! JSON cannot be serialized due to the required property 'items' missing."
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "flags"))) {
            throw "Error! JSON cannot be serialized due to the required property 'flags' missing."
        } else {
            $Flags = $JsonParameters.PSobject.Properties["flags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permanentFlags"))) {
            throw "Error! JSON cannot be serialized due to the required property 'permanentFlags' missing."
        } else {
            $PermanentFlags = $JsonParameters.PSobject.Properties["permanentFlags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unseenSeqNum"))) {
            throw "Error! JSON cannot be serialized due to the required property 'unseenSeqNum' missing."
        } else {
            $UnseenSeqNum = $JsonParameters.PSobject.Properties["unseenSeqNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messages"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messages' missing."
        } else {
            $Messages = $JsonParameters.PSobject.Properties["messages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recent"))) {
            throw "Error! JSON cannot be serialized due to the required property 'recent' missing."
        } else {
            $Recent = $JsonParameters.PSobject.Properties["recent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unseen"))) {
            throw "Error! JSON cannot be serialized due to the required property 'unseen' missing."
        } else {
            $Unseen = $JsonParameters.PSobject.Properties["unseen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uidNext"))) {
            throw "Error! JSON cannot be serialized due to the required property 'uidNext' missing."
        } else {
            $UidNext = $JsonParameters.PSobject.Properties["uidNext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uidValidity"))) {
            throw "Error! JSON cannot be serialized due to the required property 'uidValidity' missing."
        } else {
            $UidValidity = $JsonParameters.PSobject.Properties["uidValidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appendLimit"))) { #optional property not found
            $AppendLimit = $null
        } else {
            $AppendLimit = $JsonParameters.PSobject.Properties["appendLimit"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "readOnly" = ${ReadOnly}
            "items" = ${Items}
            "flags" = ${Flags}
            "permanentFlags" = ${PermanentFlags}
            "unseenSeqNum" = ${UnseenSeqNum}
            "messages" = ${Messages}
            "recent" = ${Recent}
            "unseen" = ${Unseen}
            "uidNext" = ${UidNext}
            "uidValidity" = ${UidValidity}
            "appendLimit" = ${AppendLimit}
        }

        return $PSO
    }

}

