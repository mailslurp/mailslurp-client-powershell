#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Company
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER EmailAddresses
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER GroupId
No description available.
.PARAMETER Id
No description available.
.PARAMETER LastName
No description available.
.PARAMETER MetaData
No description available.
.PARAMETER OptOut
No description available.
.PARAMETER PrimaryEmailAddress
No description available.
.PARAMETER Tags
No description available.
.OUTPUTS

ContactDto<PSCustomObject>
#>

function Initialize-ContactDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Company},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EmailAddresses},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MetaData},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OptOut},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryEmailAddress},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Tags}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ContactDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($EmailAddresses -eq $null) {
            throw "invalid value for 'EmailAddresses', 'EmailAddresses' cannot be null."
        }

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($Tags -eq $null) {
            throw "invalid value for 'Tags', 'Tags' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "company" = ${Company}
            "createdAt" = ${CreatedAt}
            "emailAddresses" = ${EmailAddresses}
            "firstName" = ${FirstName}
            "groupId" = ${GroupId}
            "id" = ${Id}
            "lastName" = ${LastName}
            "metaData" = ${MetaData}
            "optOut" = ${OptOut}
            "primaryEmailAddress" = ${PrimaryEmailAddress}
            "tags" = ${Tags}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ContactDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ContactDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ContactDto<PSCustomObject>
#>
function ConvertFrom-JsonToContactDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ContactDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ContactDto
        $AllProperties = ("company", "createdAt", "emailAddresses", "firstName", "groupId", "id", "lastName", "metaData", "optOut", "primaryEmailAddress", "tags")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'createdAt' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddresses"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emailAddresses' missing."
        } else {
            $EmailAddresses = $JsonParameters.PSobject.Properties["emailAddresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tags' missing."
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "company"))) { #optional property not found
            $Company = $null
        } else {
            $Company = $JsonParameters.PSobject.Properties["company"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metaData"))) { #optional property not found
            $MetaData = $null
        } else {
            $MetaData = $JsonParameters.PSobject.Properties["metaData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optOut"))) { #optional property not found
            $OptOut = $null
        } else {
            $OptOut = $JsonParameters.PSobject.Properties["optOut"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryEmailAddress"))) { #optional property not found
            $PrimaryEmailAddress = $null
        } else {
            $PrimaryEmailAddress = $JsonParameters.PSobject.Properties["primaryEmailAddress"].value
        }

        $PSO = [PSCustomObject]@{
            "company" = ${Company}
            "createdAt" = ${CreatedAt}
            "emailAddresses" = ${EmailAddresses}
            "firstName" = ${FirstName}
            "groupId" = ${GroupId}
            "id" = ${Id}
            "lastName" = ${LastName}
            "metaData" = ${MetaData}
            "optOut" = ${OptOut}
            "primaryEmailAddress" = ${PrimaryEmailAddress}
            "tags" = ${Tags}
        }

        return $PSO
    }

}

