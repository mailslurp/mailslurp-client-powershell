#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit access details for inbox using SMTP

.PARAMETER SmtpUsername
SMTP username for login
.PARAMETER SmtpPassword
SMTP password for login
.OUTPUTS

UpdateSmtpAccessOptions<PSCustomObject>
#>

function Initialize-UpdateSmtpAccessOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpUsername},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPassword}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => UpdateSmtpAccessOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "smtpUsername" = ${SmtpUsername}
            "smtpPassword" = ${SmtpPassword}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateSmtpAccessOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateSmtpAccessOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateSmtpAccessOptions<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateSmtpAccessOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => UpdateSmtpAccessOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateSmtpAccessOptions
        $AllProperties = ("smtpUsername", "smtpPassword")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpUsername"))) { #optional property not found
            $SmtpUsername = $null
        } else {
            $SmtpUsername = $JsonParameters.PSobject.Properties["smtpUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPassword"))) { #optional property not found
            $SmtpPassword = $null
        } else {
            $SmtpPassword = $JsonParameters.PSobject.Properties["smtpPassword"].value
        }

        $PSO = [PSCustomObject]@{
            "smtpUsername" = ${SmtpUsername}
            "smtpPassword" = ${SmtpPassword}
        }

        return $PSO
    }

}

