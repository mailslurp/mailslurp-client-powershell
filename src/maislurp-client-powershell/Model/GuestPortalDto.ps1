#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER DomainId
No description available.
.PARAMETER UserId
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER LinkHelp
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER LoginUrl
No description available.
.OUTPUTS

GuestPortalDto<PSCustomObject>
#>

function Initialize-GuestPortalDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomainId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkHelp},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${UpdatedAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoginUrl}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => GuestPortalDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($UserId -eq $null) {
            throw "invalid value for 'UserId', 'UserId' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($UpdatedAt -eq $null) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($LoginUrl -eq $null) {
            throw "invalid value for 'LoginUrl', 'LoginUrl' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "domainId" = ${DomainId}
            "userId" = ${UserId}
            "name" = ${Name}
            "description" = ${Description}
            "linkHelp" = ${LinkHelp}
            "createdAt" = ${CreatedAt}
            "updatedAt" = ${UpdatedAt}
            "loginUrl" = ${LoginUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuestPortalDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuestPortalDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuestPortalDto<PSCustomObject>
#>
function ConvertFrom-JsonToGuestPortalDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => GuestPortalDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuestPortalDto
        $AllProperties = ("id", "domainId", "userId", "name", "description", "linkHelp", "createdAt", "updatedAt", "loginUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userId' missing."
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updatedAt' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginUrl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'loginUrl' missing."
        } else {
            $LoginUrl = $JsonParameters.PSobject.Properties["loginUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domainId"))) { #optional property not found
            $DomainId = $null
        } else {
            $DomainId = $JsonParameters.PSobject.Properties["domainId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkHelp"))) { #optional property not found
            $LinkHelp = $null
        } else {
            $LinkHelp = $JsonParameters.PSobject.Properties["linkHelp"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "domainId" = ${DomainId}
            "userId" = ${UserId}
            "name" = ${Name}
            "description" = ${Description}
            "linkHelp" = ${LinkHelp}
            "createdAt" = ${CreatedAt}
            "updatedAt" = ${UpdatedAt}
            "loginUrl" = ${LoginUrl}
        }

        return $PSO
    }

}

