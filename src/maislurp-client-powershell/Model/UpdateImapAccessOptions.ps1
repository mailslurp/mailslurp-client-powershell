#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Edit access details for inbox using IMAP

.PARAMETER ImapUsername
IMAP username for login
.PARAMETER ImapPassword
IMAP password for login
.OUTPUTS

UpdateImapAccessOptions<PSCustomObject>
#>

function Initialize-UpdateImapAccessOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => UpdateImapAccessOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateImapAccessOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateImapAccessOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateImapAccessOptions<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateImapAccessOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => UpdateImapAccessOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateImapAccessOptions
        $AllProperties = ("imapUsername", "imapPassword")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) { #optional property not found
            $ImapUsername = $null
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) { #optional property not found
            $ImapPassword = $null
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        $PSO = [PSCustomObject]@{
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
        }

        return $PSO
    }

}

