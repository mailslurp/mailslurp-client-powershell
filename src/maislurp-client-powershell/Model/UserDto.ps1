#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Representation a user's account

.PARAMETER Id
No description available.
.PARAMETER ApiKey
No description available.
.PARAMETER EmailAddress
No description available.
.PARAMETER EmailAddressMd5
No description available.
.PARAMETER Created
No description available.
.PARAMETER UserType
No description available.
.PARAMETER Organization
Does user belong to an organization
.PARAMETER Verified
Has user accepted an organization invite
.PARAMETER HasPassword
No description available.
.PARAMETER IsFrozen
No description available.
.PARAMETER AddNewContacts
No description available.
.PARAMETER SsoProvider
No description available.
.PARAMETER CustomerId
No description available.
.PARAMETER HasOnboarded
No description available.
.PARAMETER ImapUsername
No description available.
.PARAMETER ImapPassword
No description available.
.PARAMETER SmtpUsername
No description available.
.PARAMETER SmtpPassword
No description available.
.OUTPUTS

UserDto<PSCustomObject>
#>

function Initialize-UserDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApiKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddressMd5},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SOLO", "CHILD_SOLO", "CHILD_TEAM")]
        [String]
        ${UserType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Organization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("VERIFIED", "PENDING")]
        [String]
        ${Verified},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${HasPassword},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsFrozen},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AddNewContacts},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoProvider},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasOnboarded},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpUsername},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPassword}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => UserDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($ApiKey -eq $null) {
            throw "invalid value for 'ApiKey', 'ApiKey' cannot be null."
        }

        if ($EmailAddress -eq $null) {
            throw "invalid value for 'EmailAddress', 'EmailAddress' cannot be null."
        }

        if ($EmailAddressMd5 -eq $null) {
            throw "invalid value for 'EmailAddressMd5', 'EmailAddressMd5' cannot be null."
        }

        if ($HasPassword -eq $null) {
            throw "invalid value for 'HasPassword', 'HasPassword' cannot be null."
        }

        if ($IsFrozen -eq $null) {
            throw "invalid value for 'IsFrozen', 'IsFrozen' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "apiKey" = ${ApiKey}
            "emailAddress" = ${EmailAddress}
            "emailAddressMd5" = ${EmailAddressMd5}
            "created" = ${Created}
            "userType" = ${UserType}
            "organization" = ${Organization}
            "verified" = ${Verified}
            "hasPassword" = ${HasPassword}
            "isFrozen" = ${IsFrozen}
            "addNewContacts" = ${AddNewContacts}
            "ssoProvider" = ${SsoProvider}
            "customerId" = ${CustomerId}
            "hasOnboarded" = ${HasOnboarded}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "smtpUsername" = ${SmtpUsername}
            "smtpPassword" = ${SmtpPassword}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserDto<PSCustomObject>
#>
function ConvertFrom-JsonToUserDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => UserDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UserDto
        $AllProperties = ("id", "apiKey", "emailAddress", "emailAddressMd5", "created", "userType", "organization", "verified", "hasPassword", "isFrozen", "addNewContacts", "ssoProvider", "customerId", "hasOnboarded", "imapUsername", "imapPassword", "smtpUsername", "smtpPassword")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apiKey"))) {
            throw "Error! JSON cannot be serialized due to the required property 'apiKey' missing."
        } else {
            $ApiKey = $JsonParameters.PSobject.Properties["apiKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddress"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emailAddress' missing."
        } else {
            $EmailAddress = $JsonParameters.PSobject.Properties["emailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddressMd5"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emailAddressMd5' missing."
        } else {
            $EmailAddressMd5 = $JsonParameters.PSobject.Properties["emailAddressMd5"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasPassword"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hasPassword' missing."
        } else {
            $HasPassword = $JsonParameters.PSobject.Properties["hasPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFrozen"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isFrozen' missing."
        } else {
            $IsFrozen = $JsonParameters.PSobject.Properties["isFrozen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userType"))) { #optional property not found
            $UserType = $null
        } else {
            $UserType = $JsonParameters.PSobject.Properties["userType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verified"))) { #optional property not found
            $Verified = $null
        } else {
            $Verified = $JsonParameters.PSobject.Properties["verified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addNewContacts"))) { #optional property not found
            $AddNewContacts = $null
        } else {
            $AddNewContacts = $JsonParameters.PSobject.Properties["addNewContacts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoProvider"))) { #optional property not found
            $SsoProvider = $null
        } else {
            $SsoProvider = $JsonParameters.PSobject.Properties["ssoProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["customerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasOnboarded"))) { #optional property not found
            $HasOnboarded = $null
        } else {
            $HasOnboarded = $JsonParameters.PSobject.Properties["hasOnboarded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) { #optional property not found
            $ImapUsername = $null
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) { #optional property not found
            $ImapPassword = $null
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpUsername"))) { #optional property not found
            $SmtpUsername = $null
        } else {
            $SmtpUsername = $JsonParameters.PSobject.Properties["smtpUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPassword"))) { #optional property not found
            $SmtpPassword = $null
        } else {
            $SmtpPassword = $JsonParameters.PSobject.Properties["smtpPassword"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "apiKey" = ${ApiKey}
            "emailAddress" = ${EmailAddress}
            "emailAddressMd5" = ${EmailAddressMd5}
            "created" = ${Created}
            "userType" = ${UserType}
            "organization" = ${Organization}
            "verified" = ${Verified}
            "hasPassword" = ${HasPassword}
            "isFrozen" = ${IsFrozen}
            "addNewContacts" = ${AddNewContacts}
            "ssoProvider" = ${SsoProvider}
            "customerId" = ${CustomerId}
            "hasOnboarded" = ${HasOnboarded}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "smtpUsername" = ${SmtpUsername}
            "smtpPassword" = ${SmtpPassword}
        }

        return $PSO
    }

}

