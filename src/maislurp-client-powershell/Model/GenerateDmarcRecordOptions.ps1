#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Domain
No description available.
.PARAMETER Version
No description available.
.PARAMETER Policy
No description available.
.PARAMETER SubdomainPolicy
No description available.
.PARAMETER ReportEmailAddress
No description available.
.PARAMETER ForensicEmailAddress
No description available.
.PARAMETER Percentage
No description available.
.PARAMETER ReportFormat
No description available.
.PARAMETER SecondsBetweenReports
No description available.
.PARAMETER Adkim
No description available.
.PARAMETER Aspf
No description available.
.PARAMETER Fo
No description available.
.OUTPUTS

GenerateDmarcRecordOptions<PSCustomObject>
#>

function Initialize-GenerateDmarcRecordOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DMARC1")]
        [String]
        ${Version},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NONE", "QUARANTINE", "REJECT")]
        [String]
        ${Policy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NONE", "QUARANTINE", "REJECT")]
        [String]
        ${SubdomainPolicy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ReportEmailAddress},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ForensicEmailAddress},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Percentage},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AFRF")]
        [String]
        ${ReportFormat},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SecondsBetweenReports},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STRICT", "RELAXED")]
        [String]
        ${Adkim},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STRICT", "RELAXED")]
        [String]
        ${Aspf},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("FO_0", "FO_1", "FO_D", "FO_S")]
        [String]
        ${Fo}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => GenerateDmarcRecordOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Domain -eq $null) {
            throw "invalid value for 'Domain', 'Domain' cannot be null."
        }

        if ($Version -eq $null) {
            throw "invalid value for 'Version', 'Version' cannot be null."
        }

        if ($Policy -eq $null) {
            throw "invalid value for 'Policy', 'Policy' cannot be null."
        }

        if ($Percentage -and $Percentage -gt 100) {
          throw "invalid value for 'Percentage', must be smaller than or equal to 100."
        }

        if ($Percentage -and $Percentage -lt 1) {
          throw "invalid value for 'Percentage', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "domain" = ${Domain}
            "version" = ${Version}
            "policy" = ${Policy}
            "subdomainPolicy" = ${SubdomainPolicy}
            "reportEmailAddress" = ${ReportEmailAddress}
            "forensicEmailAddress" = ${ForensicEmailAddress}
            "percentage" = ${Percentage}
            "reportFormat" = ${ReportFormat}
            "secondsBetweenReports" = ${SecondsBetweenReports}
            "adkim" = ${Adkim}
            "aspf" = ${Aspf}
            "fo" = ${Fo}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenerateDmarcRecordOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenerateDmarcRecordOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenerateDmarcRecordOptions<PSCustomObject>
#>
function ConvertFrom-JsonToGenerateDmarcRecordOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => GenerateDmarcRecordOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenerateDmarcRecordOptions
        $AllProperties = ("domain", "version", "policy", "subdomainPolicy", "reportEmailAddress", "forensicEmailAddress", "percentage", "reportFormat", "secondsBetweenReports", "adkim", "aspf", "fo")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'domain' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) {
            throw "Error! JSON cannot be serialized due to the required property 'domain' missing."
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) {
            throw "Error! JSON cannot be serialized due to the required property 'version' missing."
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy"))) {
            throw "Error! JSON cannot be serialized due to the required property 'policy' missing."
        } else {
            $Policy = $JsonParameters.PSobject.Properties["policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subdomainPolicy"))) { #optional property not found
            $SubdomainPolicy = $null
        } else {
            $SubdomainPolicy = $JsonParameters.PSobject.Properties["subdomainPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reportEmailAddress"))) { #optional property not found
            $ReportEmailAddress = $null
        } else {
            $ReportEmailAddress = $JsonParameters.PSobject.Properties["reportEmailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forensicEmailAddress"))) { #optional property not found
            $ForensicEmailAddress = $null
        } else {
            $ForensicEmailAddress = $JsonParameters.PSobject.Properties["forensicEmailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "percentage"))) { #optional property not found
            $Percentage = $null
        } else {
            $Percentage = $JsonParameters.PSobject.Properties["percentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reportFormat"))) { #optional property not found
            $ReportFormat = $null
        } else {
            $ReportFormat = $JsonParameters.PSobject.Properties["reportFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondsBetweenReports"))) { #optional property not found
            $SecondsBetweenReports = $null
        } else {
            $SecondsBetweenReports = $JsonParameters.PSobject.Properties["secondsBetweenReports"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adkim"))) { #optional property not found
            $Adkim = $null
        } else {
            $Adkim = $JsonParameters.PSobject.Properties["adkim"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "aspf"))) { #optional property not found
            $Aspf = $null
        } else {
            $Aspf = $JsonParameters.PSobject.Properties["aspf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fo"))) { #optional property not found
            $Fo = $null
        } else {
            $Fo = $JsonParameters.PSobject.Properties["fo"].value
        }

        $PSO = [PSCustomObject]@{
            "domain" = ${Domain}
            "version" = ${Version}
            "policy" = ${Policy}
            "subdomainPolicy" = ${SubdomainPolicy}
            "reportEmailAddress" = ${ReportEmailAddress}
            "forensicEmailAddress" = ${ForensicEmailAddress}
            "percentage" = ${Percentage}
            "reportFormat" = ${ReportFormat}
            "secondsBetweenReports" = ${SecondsBetweenReports}
            "adkim" = ${Adkim}
            "aspf" = ${Aspf}
            "fo" = ${Fo}
        }

        return $PSO
    }

}

