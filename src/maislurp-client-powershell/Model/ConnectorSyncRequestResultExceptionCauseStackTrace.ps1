#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ClassLoaderName
No description available.
.PARAMETER ModuleName
No description available.
.PARAMETER ModuleVersion
No description available.
.PARAMETER MethodName
No description available.
.PARAMETER FileName
No description available.
.PARAMETER LineNumber
No description available.
.PARAMETER NativeMethod
No description available.
.PARAMETER ClassName
No description available.
.OUTPUTS

ConnectorSyncRequestResultExceptionCauseStackTrace<PSCustomObject>
#>

function Initialize-ConnectorSyncRequestResultExceptionCauseStackTrace {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClassLoaderName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MethodName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LineNumber},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NativeMethod},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClassName}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ConnectorSyncRequestResultExceptionCauseStackTrace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "classLoaderName" = ${ClassLoaderName}
            "moduleName" = ${ModuleName}
            "moduleVersion" = ${ModuleVersion}
            "methodName" = ${MethodName}
            "fileName" = ${FileName}
            "lineNumber" = ${LineNumber}
            "nativeMethod" = ${NativeMethod}
            "className" = ${ClassName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorSyncRequestResultExceptionCauseStackTrace<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorSyncRequestResultExceptionCauseStackTrace<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorSyncRequestResultExceptionCauseStackTrace<PSCustomObject>
#>
function ConvertFrom-JsonToConnectorSyncRequestResultExceptionCauseStackTrace {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ConnectorSyncRequestResultExceptionCauseStackTrace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConnectorSyncRequestResultExceptionCauseStackTrace
        $AllProperties = ("classLoaderName", "moduleName", "moduleVersion", "methodName", "fileName", "lineNumber", "nativeMethod", "className")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "classLoaderName"))) { #optional property not found
            $ClassLoaderName = $null
        } else {
            $ClassLoaderName = $JsonParameters.PSobject.Properties["classLoaderName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleName"))) { #optional property not found
            $ModuleName = $null
        } else {
            $ModuleName = $JsonParameters.PSobject.Properties["moduleName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleVersion"))) { #optional property not found
            $ModuleVersion = $null
        } else {
            $ModuleVersion = $JsonParameters.PSobject.Properties["moduleVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "methodName"))) { #optional property not found
            $MethodName = $null
        } else {
            $MethodName = $JsonParameters.PSobject.Properties["methodName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lineNumber"))) { #optional property not found
            $LineNumber = $null
        } else {
            $LineNumber = $JsonParameters.PSobject.Properties["lineNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nativeMethod"))) { #optional property not found
            $NativeMethod = $null
        } else {
            $NativeMethod = $JsonParameters.PSobject.Properties["nativeMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "className"))) { #optional property not found
            $ClassName = $null
        } else {
            $ClassName = $JsonParameters.PSobject.Properties["className"].value
        }

        $PSO = [PSCustomObject]@{
            "classLoaderName" = ${ClassLoaderName}
            "moduleName" = ${ModuleName}
            "moduleVersion" = ${ModuleVersion}
            "methodName" = ${MethodName}
            "fileName" = ${FileName}
            "lineNumber" = ${LineNumber}
            "nativeMethod" = ${NativeMethod}
            "className" = ${ClassName}
        }

        return $PSO
    }

}

