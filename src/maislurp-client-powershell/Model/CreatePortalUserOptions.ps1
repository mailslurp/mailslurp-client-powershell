#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Password
No description available.
.PARAMETER Name
No description available.
.PARAMETER Username
No description available.
.PARAMETER SkipInboxCreation
No description available.
.PARAMETER InboxId
No description available.
.PARAMETER CreateInboxOptions
No description available.
.OUTPUTS

CreatePortalUserOptions<PSCustomObject>
#>

function Initialize-CreatePortalUserOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SkipInboxCreation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreateInboxOptions}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => CreatePortalUserOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "password" = ${Password}
            "name" = ${Name}
            "username" = ${Username}
            "skipInboxCreation" = ${SkipInboxCreation}
            "inboxId" = ${InboxId}
            "createInboxOptions" = ${CreateInboxOptions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreatePortalUserOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreatePortalUserOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreatePortalUserOptions<PSCustomObject>
#>
function ConvertFrom-JsonToCreatePortalUserOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => CreatePortalUserOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreatePortalUserOptions
        $AllProperties = ("password", "name", "username", "skipInboxCreation", "inboxId", "createInboxOptions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipInboxCreation"))) { #optional property not found
            $SkipInboxCreation = $null
        } else {
            $SkipInboxCreation = $JsonParameters.PSobject.Properties["skipInboxCreation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) { #optional property not found
            $InboxId = $null
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createInboxOptions"))) { #optional property not found
            $CreateInboxOptions = $null
        } else {
            $CreateInboxOptions = $JsonParameters.PSobject.Properties["createInboxOptions"].value
        }

        $PSO = [PSCustomObject]@{
            "password" = ${Password}
            "name" = ${Name}
            "username" = ${Username}
            "skipInboxCreation" = ${SkipInboxCreation}
            "inboxId" = ${InboxId}
            "createInboxOptions" = ${CreateInboxOptions}
        }

        return $PSO
    }

}

