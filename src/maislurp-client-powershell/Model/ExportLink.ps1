#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Export download link

.PARAMETER DownloadLink
No description available.
.OUTPUTS

ExportLink<PSCustomObject>
#>

function Initialize-ExportLink {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DownloadLink}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ExportLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "downloadLink" = ${DownloadLink}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExportLink<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExportLink<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExportLink<PSCustomObject>
#>
function ConvertFrom-JsonToExportLink {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ExportLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExportLink
        $AllProperties = ("downloadLink")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downloadLink"))) { #optional property not found
            $DownloadLink = $null
        } else {
            $DownloadLink = $JsonParameters.PSobject.Properties["downloadLink"].value
        }

        $PSO = [PSCustomObject]@{
            "downloadLink" = ${DownloadLink}
        }

        return $PSO
    }

}

