#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Access details for inbox using IMAP

.PARAMETER ImapServerHost
IMAP server host domain
.PARAMETER ImapServerPort
IMAP server host port
.PARAMETER ImapUsername
IMAP username for login
.PARAMETER ImapPassword
IMAP password for login
.PARAMETER ImapMailbox
IMAP mailbox to SELECT
.OUTPUTS

ImapAccessDetails<PSCustomObject>
#>

function Initialize-ImapAccessDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapServerHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ImapServerPort},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapMailbox}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ImapAccessDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ImapServerHost -eq $null) {
            throw "invalid value for 'ImapServerHost', 'ImapServerHost' cannot be null."
        }

        if ($ImapServerPort -eq $null) {
            throw "invalid value for 'ImapServerPort', 'ImapServerPort' cannot be null."
        }

        if ($ImapUsername -eq $null) {
            throw "invalid value for 'ImapUsername', 'ImapUsername' cannot be null."
        }

        if ($ImapPassword -eq $null) {
            throw "invalid value for 'ImapPassword', 'ImapPassword' cannot be null."
        }

        if ($ImapMailbox -eq $null) {
            throw "invalid value for 'ImapMailbox', 'ImapMailbox' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "imapServerHost" = ${ImapServerHost}
            "imapServerPort" = ${ImapServerPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapMailbox" = ${ImapMailbox}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImapAccessDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImapAccessDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImapAccessDetails<PSCustomObject>
#>
function ConvertFrom-JsonToImapAccessDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ImapAccessDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImapAccessDetails
        $AllProperties = ("imapServerHost", "imapServerPort", "imapUsername", "imapPassword", "imapMailbox")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'imapServerHost' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapServerHost"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapServerHost' missing."
        } else {
            $ImapServerHost = $JsonParameters.PSobject.Properties["imapServerHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapServerPort"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapServerPort' missing."
        } else {
            $ImapServerPort = $JsonParameters.PSobject.Properties["imapServerPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapUsername' missing."
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapPassword' missing."
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapMailbox"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapMailbox' missing."
        } else {
            $ImapMailbox = $JsonParameters.PSobject.Properties["imapMailbox"].value
        }

        $PSO = [PSCustomObject]@{
            "imapServerHost" = ${ImapServerHost}
            "imapServerPort" = ${ImapServerPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapMailbox" = ${ImapMailbox}
        }

        return $PSO
    }

}

