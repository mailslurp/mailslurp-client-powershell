#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Base32SecretKey
Base32 secret key for TOTP device as alternative to OTP Auth URI or QR code.
.PARAMETER Name
Name for labeling the TOTP device
.PARAMETER Username
Optional username for the TOTP device
.PARAMETER Issuer
Optional issuer override for the TOTP device
.PARAMETER Digits
Optional number of digits in TOTP code
.PARAMETER Period
Optional period in seconds for TOTP code expiration
.PARAMETER Algorithm
Optional algorithm override
.OUTPUTS

CreateTotpDeviceBase32SecretKeyOptions<PSCustomObject>
#>

function Initialize-CreateTotpDeviceBase32SecretKeyOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Base32SecretKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Issuer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Digits} = 6,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Period} = 30,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Algorithm}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => CreateTotpDeviceBase32SecretKeyOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Base32SecretKey -eq $null) {
            throw "invalid value for 'Base32SecretKey', 'Base32SecretKey' cannot be null."
        }

        if ($Digits -and $Digits -gt 255) {
          throw "invalid value for 'Digits', must be smaller than or equal to 255."
        }

        if ($Digits -and $Digits -lt 0) {
          throw "invalid value for 'Digits', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "base32SecretKey" = ${Base32SecretKey}
            "name" = ${Name}
            "username" = ${Username}
            "issuer" = ${Issuer}
            "digits" = ${Digits}
            "period" = ${Period}
            "algorithm" = ${Algorithm}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateTotpDeviceBase32SecretKeyOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateTotpDeviceBase32SecretKeyOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateTotpDeviceBase32SecretKeyOptions<PSCustomObject>
#>
function ConvertFrom-JsonToCreateTotpDeviceBase32SecretKeyOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => CreateTotpDeviceBase32SecretKeyOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateTotpDeviceBase32SecretKeyOptions
        $AllProperties = ("base32SecretKey", "name", "username", "issuer", "digits", "period", "algorithm")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'base32SecretKey' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base32SecretKey"))) {
            throw "Error! JSON cannot be serialized due to the required property 'base32SecretKey' missing."
        } else {
            $Base32SecretKey = $JsonParameters.PSobject.Properties["base32SecretKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) { #optional property not found
            $Issuer = $null
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digits"))) { #optional property not found
            $Digits = $null
        } else {
            $Digits = $JsonParameters.PSobject.Properties["digits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) { #optional property not found
            $Period = $null
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "algorithm"))) { #optional property not found
            $Algorithm = $null
        } else {
            $Algorithm = $JsonParameters.PSobject.Properties["algorithm"].value
        }

        $PSO = [PSCustomObject]@{
            "base32SecretKey" = ${Base32SecretKey}
            "name" = ${Name}
            "username" = ${Username}
            "issuer" = ${Issuer}
            "digits" = ${Digits}
            "period" = ${Period}
            "algorithm" = ${Algorithm}
        }

        return $PSO
    }

}

