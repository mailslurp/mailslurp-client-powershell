#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

NEW_ATTACHMENT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to that contains an attachment. You can use the attachmentId to download the attachment.

.PARAMETER MessageId
Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
.PARAMETER WebhookId
ID of webhook entity being triggered
.PARAMETER WebhookName
Name of the webhook being triggered
.PARAMETER EventName
Name of the event type webhook is being triggered for.
.PARAMETER AttachmentId
ID of attachment. Use the `AttachmentController` to
.PARAMETER Name
Filename of the attachment if present
.PARAMETER ContentType
Content type of attachment such as 'image/png' or 'application/pdf
.PARAMETER ContentLength
Size of attachment in bytes
.OUTPUTS

WebhookNewAttachmentPayload<PSCustomObject>
#>

function Initialize-WebhookNewAttachmentPayload {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS")]
        [String]
        ${EventName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AttachmentId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ContentLength}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => WebhookNewAttachmentPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($MessageId -eq $null) {
            throw "invalid value for 'MessageId', 'MessageId' cannot be null."
        }

        if ($WebhookId -eq $null) {
            throw "invalid value for 'WebhookId', 'WebhookId' cannot be null."
        }

        if ($EventName -eq $null) {
            throw "invalid value for 'EventName', 'EventName' cannot be null."
        }

        if ($AttachmentId -eq $null) {
            throw "invalid value for 'AttachmentId', 'AttachmentId' cannot be null."
        }

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($ContentType -eq $null) {
            throw "invalid value for 'ContentType', 'ContentType' cannot be null."
        }

        if ($ContentLength -eq $null) {
            throw "invalid value for 'ContentLength', 'ContentLength' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "webhookName" = ${WebhookName}
            "eventName" = ${EventName}
            "attachmentId" = ${AttachmentId}
            "name" = ${Name}
            "contentType" = ${ContentType}
            "contentLength" = ${ContentLength}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WebhookNewAttachmentPayload<PSCustomObject>

.DESCRIPTION

Convert from JSON to WebhookNewAttachmentPayload<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WebhookNewAttachmentPayload<PSCustomObject>
#>
function ConvertFrom-JsonToWebhookNewAttachmentPayload {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => WebhookNewAttachmentPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WebhookNewAttachmentPayload
        $AllProperties = ("messageId", "webhookId", "webhookName", "eventName", "attachmentId", "name", "contentType", "contentLength")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'messageId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messageId' missing."
        } else {
            $MessageId = $JsonParameters.PSobject.Properties["messageId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'webhookId' missing."
        } else {
            $WebhookId = $JsonParameters.PSobject.Properties["webhookId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'eventName' missing."
        } else {
            $EventName = $JsonParameters.PSobject.Properties["eventName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachmentId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attachmentId' missing."
        } else {
            $AttachmentId = $JsonParameters.PSobject.Properties["attachmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'contentType' missing."
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["contentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentLength"))) {
            throw "Error! JSON cannot be serialized due to the required property 'contentLength' missing."
        } else {
            $ContentLength = $JsonParameters.PSobject.Properties["contentLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookName"))) { #optional property not found
            $WebhookName = $null
        } else {
            $WebhookName = $JsonParameters.PSobject.Properties["webhookName"].value
        }

        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "webhookName" = ${WebhookName}
            "eventName" = ${EventName}
            "attachmentId" = ${AttachmentId}
            "name" = ${Name}
            "contentType" = ${ContentType}
            "contentLength" = ${ContentLength}
        }

        return $PSO
    }

}

