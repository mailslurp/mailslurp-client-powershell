#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

HTML Validation Results

.PARAMETER IsValid
Is HTML validation result valid
.PARAMETER Infos
Optional infos resulting from HTML validation
.PARAMETER Errors
Optional errors resulting from HTML validation
.PARAMETER Warnings
Optional warnings resulting from HTML validation
.OUTPUTS

HTMLValidationResult<PSCustomObject>
#>

function Initialize-HTMLValidationResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsValid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Infos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Warnings}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => HTMLValidationResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($IsValid -eq $null) {
            throw "invalid value for 'IsValid', 'IsValid' cannot be null."
        }

        if ($Infos -eq $null) {
            throw "invalid value for 'Infos', 'Infos' cannot be null."
        }

        if ($Errors -eq $null) {
            throw "invalid value for 'Errors', 'Errors' cannot be null."
        }

        if ($Warnings -eq $null) {
            throw "invalid value for 'Warnings', 'Warnings' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "isValid" = ${IsValid}
            "infos" = ${Infos}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HTMLValidationResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to HTMLValidationResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HTMLValidationResult<PSCustomObject>
#>
function ConvertFrom-JsonToHTMLValidationResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => HTMLValidationResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HTMLValidationResult
        $AllProperties = ("isValid", "infos", "errors", "warnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'isValid' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isValid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isValid' missing."
        } else {
            $IsValid = $JsonParameters.PSobject.Properties["isValid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "infos"))) {
            throw "Error! JSON cannot be serialized due to the required property 'infos' missing."
        } else {
            $Infos = $JsonParameters.PSobject.Properties["infos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'errors' missing."
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'warnings' missing."
        } else {
            $Warnings = $JsonParameters.PSobject.Properties["warnings"].value
        }

        $PSO = [PSCustomObject]@{
            "isValid" = ${IsValid}
            "infos" = ${Infos}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }

        return $PSO
    }

}

