#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

IMAP fetch content in raw format

.PARAMETER Content
Content of the email
.PARAMETER Id
ID of the email
.PARAMETER Uid
UID of the email
.PARAMETER SeqNum
Sequence number of the email
.PARAMETER Read
Read status of the email
.OUTPUTS

ImapServerFetchItem<PSCustomObject>
#>

function Initialize-ImapServerFetchItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Uid},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${SeqNum},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Read}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ImapServerFetchItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Content -eq $null) {
            throw "invalid value for 'Content', 'Content' cannot be null."
        }

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($Uid -eq $null) {
            throw "invalid value for 'Uid', 'Uid' cannot be null."
        }

        if ($SeqNum -eq $null) {
            throw "invalid value for 'SeqNum', 'SeqNum' cannot be null."
        }

        if ($Read -eq $null) {
            throw "invalid value for 'Read', 'Read' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "content" = ${Content}
            "id" = ${Id}
            "uid" = ${Uid}
            "seqNum" = ${SeqNum}
            "read" = ${Read}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImapServerFetchItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImapServerFetchItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImapServerFetchItem<PSCustomObject>
#>
function ConvertFrom-JsonToImapServerFetchItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ImapServerFetchItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImapServerFetchItem
        $AllProperties = ("content", "id", "uid", "seqNum", "read")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content' missing."
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'uid' missing."
        } else {
            $Uid = $JsonParameters.PSobject.Properties["uid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seqNum"))) {
            throw "Error! JSON cannot be serialized due to the required property 'seqNum' missing."
        } else {
            $SeqNum = $JsonParameters.PSobject.Properties["seqNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read"))) {
            throw "Error! JSON cannot be serialized due to the required property 'read' missing."
        } else {
            $Read = $JsonParameters.PSobject.Properties["read"].value
        }

        $PSO = [PSCustomObject]@{
            "content" = ${Content}
            "id" = ${Id}
            "uid" = ${Uid}
            "seqNum" = ${SeqNum}
            "read" = ${Read}
        }

        return $PSO
    }

}

