#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Result of email exists query

.PARAMETER Exists
No description available.
.PARAMETER SoftBounce
Inbox is full or simulating a soft bounce via inbox replier or rulesets
.PARAMETER HardBounce
Inbox is blocking receiving emails or simulating a hard bounce via inbox replier or rulesets
.OUTPUTS

InboxExistsDto<PSCustomObject>
#>

function Initialize-InboxExistsDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Exists},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SoftBounce},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HardBounce}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => InboxExistsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Exists -eq $null) {
            throw "invalid value for 'Exists', 'Exists' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "exists" = ${Exists}
            "softBounce" = ${SoftBounce}
            "hardBounce" = ${HardBounce}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InboxExistsDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to InboxExistsDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InboxExistsDto<PSCustomObject>
#>
function ConvertFrom-JsonToInboxExistsDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => InboxExistsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InboxExistsDto
        $AllProperties = ("exists", "softBounce", "hardBounce")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'exists' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exists"))) {
            throw "Error! JSON cannot be serialized due to the required property 'exists' missing."
        } else {
            $Exists = $JsonParameters.PSobject.Properties["exists"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "softBounce"))) { #optional property not found
            $SoftBounce = $null
        } else {
            $SoftBounce = $JsonParameters.PSobject.Properties["softBounce"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hardBounce"))) { #optional property not found
            $HardBounce = $null
        } else {
            $HardBounce = $JsonParameters.PSobject.Properties["hardBounce"].value
        }

        $PSO = [PSCustomObject]@{
            "exists" = ${Exists}
            "softBounce" = ${SoftBounce}
            "hardBounce" = ${HardBounce}
        }

        return $PSO
    }

}

