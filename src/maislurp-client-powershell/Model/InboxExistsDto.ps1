#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Exists
No description available.
.OUTPUTS

InboxExistsDto<PSCustomObject>
#>

function Initialize-InboxExistsDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Exists}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => InboxExistsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exists" = ${Exists}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InboxExistsDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to InboxExistsDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InboxExistsDto<PSCustomObject>
#>
function ConvertFrom-JsonToInboxExistsDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => InboxExistsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InboxExistsDto
        $AllProperties = ("exists")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exists"))) { #optional property not found
            $Exists = $null
        } else {
            $Exists = $JsonParameters.PSobject.Properties["exists"].value
        }

        $PSO = [PSCustomObject]@{
            "exists" = ${Exists}
        }

        return $PSO
    }

}

