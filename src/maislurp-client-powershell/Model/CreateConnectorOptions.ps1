#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Options for creating an inbox connection with an external mail provider

.PARAMETER SyncEnabled
Enable automatic background sync
.PARAMETER SyncScheduleType
Sync schedule type
.PARAMETER SyncInterval
Sync interval in minutes
.PARAMETER Name
Name of connector
.PARAMETER EmailAddress
Email address of external inbox
.PARAMETER Enabled
Is connector enabled
.OUTPUTS

CreateConnectorOptions<PSCustomObject>
#>

function Initialize-CreateConnectorOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SyncEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INTERVAL")]
        [String]
        ${SyncScheduleType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SyncInterval},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddress},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => CreateConnectorOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "syncEnabled" = ${SyncEnabled}
            "syncScheduleType" = ${SyncScheduleType}
            "syncInterval" = ${SyncInterval}
            "name" = ${Name}
            "emailAddress" = ${EmailAddress}
            "enabled" = ${Enabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateConnectorOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateConnectorOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateConnectorOptions<PSCustomObject>
#>
function ConvertFrom-JsonToCreateConnectorOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => CreateConnectorOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateConnectorOptions
        $AllProperties = ("syncEnabled", "syncScheduleType", "syncInterval", "name", "emailAddress", "enabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncEnabled"))) { #optional property not found
            $SyncEnabled = $null
        } else {
            $SyncEnabled = $JsonParameters.PSobject.Properties["syncEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncScheduleType"))) { #optional property not found
            $SyncScheduleType = $null
        } else {
            $SyncScheduleType = $JsonParameters.PSobject.Properties["syncScheduleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncInterval"))) { #optional property not found
            $SyncInterval = $null
        } else {
            $SyncInterval = $JsonParameters.PSobject.Properties["syncInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddress"))) { #optional property not found
            $EmailAddress = $null
        } else {
            $EmailAddress = $JsonParameters.PSobject.Properties["emailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "syncEnabled" = ${SyncEnabled}
            "syncScheduleType" = ${SyncScheduleType}
            "syncInterval" = ${SyncInterval}
            "name" = ${Name}
            "emailAddress" = ${EmailAddress}
            "enabled" = ${Enabled}
        }

        return $PSO
    }

}

