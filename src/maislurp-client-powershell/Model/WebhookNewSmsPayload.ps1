#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

NEW_SMS webhook payload. Sent to your webhook url endpoint via HTTP POST when an sms is received by the phone number that your webhook is attached to. Use the SMS ID to fetch the full SMS details.

.PARAMETER MessageId
Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
.PARAMETER WebhookId
ID of webhook entity being triggered
.PARAMETER EventName
Name of the event type webhook is being triggered for.
.PARAMETER WebhookName
Name of the webhook being triggered
.PARAMETER SmsId
ID of SMS message
.PARAMETER UserId
User ID of event
.PARAMETER PhoneNumber
ID of phone number receiving SMS
.PARAMETER ToNumber
Recipient phone number
.PARAMETER FromNumber
Sender phone number
.PARAMETER Body
SMS message body
.PARAMETER Read
SMS has been read
.OUTPUTS

WebhookNewSmsPayload<PSCustomObject>
#>

function Initialize-WebhookNewSmsPayload {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS", "NEW_GUEST_USER")]
        [String]
        ${EventName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmsId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneNumber},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToNumber},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromNumber},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Read}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => WebhookNewSmsPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($MessageId -eq $null) {
            throw "invalid value for 'MessageId', 'MessageId' cannot be null."
        }

        if ($WebhookId -eq $null) {
            throw "invalid value for 'WebhookId', 'WebhookId' cannot be null."
        }

        if ($EventName -eq $null) {
            throw "invalid value for 'EventName', 'EventName' cannot be null."
        }

        if ($SmsId -eq $null) {
            throw "invalid value for 'SmsId', 'SmsId' cannot be null."
        }

        if ($UserId -eq $null) {
            throw "invalid value for 'UserId', 'UserId' cannot be null."
        }

        if ($PhoneNumber -eq $null) {
            throw "invalid value for 'PhoneNumber', 'PhoneNumber' cannot be null."
        }

        if ($ToNumber -eq $null) {
            throw "invalid value for 'ToNumber', 'ToNumber' cannot be null."
        }

        if ($FromNumber -eq $null) {
            throw "invalid value for 'FromNumber', 'FromNumber' cannot be null."
        }

        if ($Body -eq $null) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if ($Read -eq $null) {
            throw "invalid value for 'Read', 'Read' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "eventName" = ${EventName}
            "webhookName" = ${WebhookName}
            "smsId" = ${SmsId}
            "userId" = ${UserId}
            "phoneNumber" = ${PhoneNumber}
            "toNumber" = ${ToNumber}
            "fromNumber" = ${FromNumber}
            "body" = ${Body}
            "read" = ${Read}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WebhookNewSmsPayload<PSCustomObject>

.DESCRIPTION

Convert from JSON to WebhookNewSmsPayload<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WebhookNewSmsPayload<PSCustomObject>
#>
function ConvertFrom-JsonToWebhookNewSmsPayload {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => WebhookNewSmsPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WebhookNewSmsPayload
        $AllProperties = ("messageId", "webhookId", "eventName", "webhookName", "smsId", "userId", "phoneNumber", "toNumber", "fromNumber", "body", "read")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'messageId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messageId' missing."
        } else {
            $MessageId = $JsonParameters.PSobject.Properties["messageId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'webhookId' missing."
        } else {
            $WebhookId = $JsonParameters.PSobject.Properties["webhookId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'eventName' missing."
        } else {
            $EventName = $JsonParameters.PSobject.Properties["eventName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smsId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'smsId' missing."
        } else {
            $SmsId = $JsonParameters.PSobject.Properties["smsId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userId' missing."
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phoneNumber"))) {
            throw "Error! JSON cannot be serialized due to the required property 'phoneNumber' missing."
        } else {
            $PhoneNumber = $JsonParameters.PSobject.Properties["phoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toNumber"))) {
            throw "Error! JSON cannot be serialized due to the required property 'toNumber' missing."
        } else {
            $ToNumber = $JsonParameters.PSobject.Properties["toNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fromNumber"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fromNumber' missing."
        } else {
            $FromNumber = $JsonParameters.PSobject.Properties["fromNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property 'body' missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read"))) {
            throw "Error! JSON cannot be serialized due to the required property 'read' missing."
        } else {
            $Read = $JsonParameters.PSobject.Properties["read"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookName"))) { #optional property not found
            $WebhookName = $null
        } else {
            $WebhookName = $JsonParameters.PSobject.Properties["webhookName"].value
        }

        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "eventName" = ${EventName}
            "webhookName" = ${WebhookName}
            "smsId" = ${SmsId}
            "userId" = ${UserId}
            "phoneNumber" = ${PhoneNumber}
            "toNumber" = ${ToNumber}
            "fromNumber" = ${FromNumber}
            "body" = ${Body}
            "read" = ${Read}
        }

        return $PSO
    }

}

