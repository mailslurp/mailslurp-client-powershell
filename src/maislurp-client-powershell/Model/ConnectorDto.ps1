#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER UserId
No description available.
.PARAMETER ConnectorType
No description available.
.PARAMETER ConnectorAuthType
No description available.
.PARAMETER SyncEnabled
No description available.
.PARAMETER SyncScheduleType
No description available.
.PARAMETER SyncInterval
No description available.
.PARAMETER ImapHost
No description available.
.PARAMETER ImapPort
No description available.
.PARAMETER ImapUsername
No description available.
.PARAMETER ImapPassword
No description available.
.PARAMETER ImapSsl
No description available.
.PARAMETER CreatedAt
No description available.
.OUTPUTS

ConnectorDto<PSCustomObject>
#>

function Initialize-ConnectorDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IMAP")]
        [String]
        ${ConnectorType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PLAIN_TEXT")]
        [String]
        ${ConnectorAuthType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${SyncEnabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INTERVAL")]
        [String]
        ${SyncScheduleType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SyncInterval},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapHost},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImapPort},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ImapSsl},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ConnectorDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($UserId -eq $null) {
            throw "invalid value for 'UserId', 'UserId' cannot be null."
        }

        if ($ConnectorType -eq $null) {
            throw "invalid value for 'ConnectorType', 'ConnectorType' cannot be null."
        }

        if ($ConnectorAuthType -eq $null) {
            throw "invalid value for 'ConnectorAuthType', 'ConnectorAuthType' cannot be null."
        }

        if ($SyncEnabled -eq $null) {
            throw "invalid value for 'SyncEnabled', 'SyncEnabled' cannot be null."
        }

        if ($SyncScheduleType -eq $null) {
            throw "invalid value for 'SyncScheduleType', 'SyncScheduleType' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "userId" = ${UserId}
            "connectorType" = ${ConnectorType}
            "connectorAuthType" = ${ConnectorAuthType}
            "syncEnabled" = ${SyncEnabled}
            "syncScheduleType" = ${SyncScheduleType}
            "syncInterval" = ${SyncInterval}
            "imapHost" = ${ImapHost}
            "imapPort" = ${ImapPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapSsl" = ${ImapSsl}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorDto<PSCustomObject>
#>
function ConvertFrom-JsonToConnectorDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ConnectorDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConnectorDto
        $AllProperties = ("id", "userId", "connectorType", "connectorAuthType", "syncEnabled", "syncScheduleType", "syncInterval", "imapHost", "imapPort", "imapUsername", "imapPassword", "imapSsl", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userId' missing."
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectorType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connectorType' missing."
        } else {
            $ConnectorType = $JsonParameters.PSobject.Properties["connectorType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectorAuthType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connectorAuthType' missing."
        } else {
            $ConnectorAuthType = $JsonParameters.PSobject.Properties["connectorAuthType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'syncEnabled' missing."
        } else {
            $SyncEnabled = $JsonParameters.PSobject.Properties["syncEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncScheduleType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'syncScheduleType' missing."
        } else {
            $SyncScheduleType = $JsonParameters.PSobject.Properties["syncScheduleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncInterval"))) { #optional property not found
            $SyncInterval = $null
        } else {
            $SyncInterval = $JsonParameters.PSobject.Properties["syncInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapHost"))) { #optional property not found
            $ImapHost = $null
        } else {
            $ImapHost = $JsonParameters.PSobject.Properties["imapHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPort"))) { #optional property not found
            $ImapPort = $null
        } else {
            $ImapPort = $JsonParameters.PSobject.Properties["imapPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) { #optional property not found
            $ImapUsername = $null
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) { #optional property not found
            $ImapPassword = $null
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapSsl"))) { #optional property not found
            $ImapSsl = $null
        } else {
            $ImapSsl = $JsonParameters.PSobject.Properties["imapSsl"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "userId" = ${UserId}
            "connectorType" = ${ConnectorType}
            "connectorAuthType" = ${ConnectorAuthType}
            "syncEnabled" = ${SyncEnabled}
            "syncScheduleType" = ${SyncScheduleType}
            "syncInterval" = ${SyncInterval}
            "imapHost" = ${ImapHost}
            "imapPort" = ${ImapPort}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "imapSsl" = ${ImapSsl}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

