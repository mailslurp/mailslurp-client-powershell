#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Inbox replier. Will automatically reply to inbound emails that match given field for an inbox.

.PARAMETER Id
No description available.
.PARAMETER InboxId
No description available.
.PARAMETER Name
No description available.
.PARAMETER Field
No description available.
.PARAMETER Match
No description available.
.PARAMETER ReplyTo
No description available.
.PARAMETER Subject
No description available.
.PARAMETER VarFrom
No description available.
.PARAMETER Charset
No description available.
.PARAMETER IsHTML
No description available.
.PARAMETER TemplateId
No description available.
.PARAMETER TemplateVariables
No description available.
.PARAMETER IgnoreReplyTo
No description available.
.PARAMETER CreatedAt
No description available.
.OUTPUTS

InboxReplierDto<PSCustomObject>
#>

function Initialize-InboxReplierDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RECIPIENTS", "SENDER", "SUBJECT", "ATTACHMENTS")]
        [String]
        ${Field},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Match},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplyTo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Charset},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsHTML},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${TemplateVariables},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IgnoreReplyTo},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => InboxReplierDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($InboxId -eq $null) {
            throw "invalid value for 'InboxId', 'InboxId' cannot be null."
        }

        if ($Field -eq $null) {
            throw "invalid value for 'Field', 'Field' cannot be null."
        }

        if ($Match -eq $null) {
            throw "invalid value for 'Match', 'Match' cannot be null."
        }

        if ($IsHTML -eq $null) {
            throw "invalid value for 'IsHTML', 'IsHTML' cannot be null."
        }

        if ($IgnoreReplyTo -eq $null) {
            throw "invalid value for 'IgnoreReplyTo', 'IgnoreReplyTo' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "name" = ${Name}
            "field" = ${Field}
            "match" = ${Match}
            "replyTo" = ${ReplyTo}
            "subject" = ${Subject}
            "from" = ${VarFrom}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "templateId" = ${TemplateId}
            "templateVariables" = ${TemplateVariables}
            "ignoreReplyTo" = ${IgnoreReplyTo}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InboxReplierDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to InboxReplierDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InboxReplierDto<PSCustomObject>
#>
function ConvertFrom-JsonToInboxReplierDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => InboxReplierDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InboxReplierDto
        $AllProperties = ("id", "inboxId", "name", "field", "match", "replyTo", "subject", "from", "charset", "isHTML", "templateId", "templateVariables", "ignoreReplyTo", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inboxId' missing."
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) {
            throw "Error! JSON cannot be serialized due to the required property 'field' missing."
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "match"))) {
            throw "Error! JSON cannot be serialized due to the required property 'match' missing."
        } else {
            $Match = $JsonParameters.PSobject.Properties["match"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHTML"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isHTML' missing."
        } else {
            $IsHTML = $JsonParameters.PSobject.Properties["isHTML"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignoreReplyTo"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ignoreReplyTo' missing."
        } else {
            $IgnoreReplyTo = $JsonParameters.PSobject.Properties["ignoreReplyTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replyTo"))) { #optional property not found
            $ReplyTo = $null
        } else {
            $ReplyTo = $JsonParameters.PSobject.Properties["replyTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "charset"))) { #optional property not found
            $Charset = $null
        } else {
            $Charset = $JsonParameters.PSobject.Properties["charset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateId"))) { #optional property not found
            $TemplateId = $null
        } else {
            $TemplateId = $JsonParameters.PSobject.Properties["templateId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateVariables"))) { #optional property not found
            $TemplateVariables = $null
        } else {
            $TemplateVariables = $JsonParameters.PSobject.Properties["templateVariables"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "name" = ${Name}
            "field" = ${Field}
            "match" = ${Match}
            "replyTo" = ${ReplyTo}
            "subject" = ${Subject}
            "from" = ${VarFrom}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "templateId" = ${TemplateId}
            "templateVariables" = ${TemplateVariables}
            "ignoreReplyTo" = ${IgnoreReplyTo}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

