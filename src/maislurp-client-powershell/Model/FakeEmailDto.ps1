#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER EmailAddress
No description available.
.PARAMETER VarSender
No description available.
.PARAMETER Recipients
No description available.
.PARAMETER AttachmentNames
No description available.
.PARAMETER Subject
No description available.
.PARAMETER Preview
No description available.
.PARAMETER Body
use read content endpoints instead
.PARAMETER Seen
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER ContentType
No description available.
.PARAMETER BodyUrl
No description available.
.OUTPUTS

FakeEmailDto<PSCustomObject>
#>

function Initialize-FakeEmailDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarSender},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Recipients},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AttachmentNames},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Preview},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Seen},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BodyUrl}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => FakeEmailDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($EmailAddress -eq $null) {
            throw "invalid value for 'EmailAddress', 'EmailAddress' cannot be null."
        }

        if ($AttachmentNames -eq $null) {
            throw "invalid value for 'AttachmentNames', 'AttachmentNames' cannot be null."
        }

        if ($Body -eq $null) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if ($Seen -eq $null) {
            throw "invalid value for 'Seen', 'Seen' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($ContentType -eq $null) {
            throw "invalid value for 'ContentType', 'ContentType' cannot be null."
        }

        if ($BodyUrl -eq $null) {
            throw "invalid value for 'BodyUrl', 'BodyUrl' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "emailAddress" = ${EmailAddress}
            "sender" = ${VarSender}
            "recipients" = ${Recipients}
            "attachmentNames" = ${AttachmentNames}
            "subject" = ${Subject}
            "preview" = ${Preview}
            "body" = ${Body}
            "seen" = ${Seen}
            "createdAt" = ${CreatedAt}
            "contentType" = ${ContentType}
            "bodyUrl" = ${BodyUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FakeEmailDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to FakeEmailDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FakeEmailDto<PSCustomObject>
#>
function ConvertFrom-JsonToFakeEmailDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => FakeEmailDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FakeEmailDto
        $AllProperties = ("id", "emailAddress", "sender", "recipients", "attachmentNames", "subject", "preview", "body", "seen", "createdAt", "contentType", "bodyUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddress"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emailAddress' missing."
        } else {
            $EmailAddress = $JsonParameters.PSobject.Properties["emailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachmentNames"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attachmentNames' missing."
        } else {
            $AttachmentNames = $JsonParameters.PSobject.Properties["attachmentNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property 'body' missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seen"))) {
            throw "Error! JSON cannot be serialized due to the required property 'seen' missing."
        } else {
            $Seen = $JsonParameters.PSobject.Properties["seen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'contentType' missing."
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["contentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bodyUrl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bodyUrl' missing."
        } else {
            $BodyUrl = $JsonParameters.PSobject.Properties["bodyUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sender"))) { #optional property not found
            $VarSender = $null
        } else {
            $VarSender = $JsonParameters.PSobject.Properties["sender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipients"))) { #optional property not found
            $Recipients = $null
        } else {
            $Recipients = $JsonParameters.PSobject.Properties["recipients"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preview"))) { #optional property not found
            $Preview = $null
        } else {
            $Preview = $JsonParameters.PSobject.Properties["preview"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "emailAddress" = ${EmailAddress}
            "sender" = ${VarSender}
            "recipients" = ${Recipients}
            "attachmentNames" = ${AttachmentNames}
            "subject" = ${Subject}
            "preview" = ${Preview}
            "body" = ${Body}
            "seen" = ${Seen}
            "createdAt" = ${CreatedAt}
            "contentType" = ${ContentType}
            "bodyUrl" = ${BodyUrl}
        }

        return $PSO
    }

}

