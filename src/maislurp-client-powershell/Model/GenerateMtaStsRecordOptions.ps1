#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarHost
No description available.
.PARAMETER Version
No description available.
.PARAMETER Mode
No description available.
.PARAMETER Ttl
No description available.
.PARAMETER MaxAgeSeconds
No description available.
.PARAMETER MxRecords
No description available.
.OUTPUTS

GenerateMtaStsRecordOptions<PSCustomObject>
#>

function Initialize-GenerateMtaStsRecordOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STSv1")]
        [String]
        ${Version},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TESTING", "ENFORCE", "NONE")]
        [String]
        ${Mode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Ttl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${MaxAgeSeconds},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${MxRecords}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => GenerateMtaStsRecordOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($VarHost -eq $null) {
            throw "invalid value for 'VarHost', 'VarHost' cannot be null."
        }

        if ($Version -eq $null) {
            throw "invalid value for 'Version', 'Version' cannot be null."
        }

        if ($Mode -eq $null) {
            throw "invalid value for 'Mode', 'Mode' cannot be null."
        }

        if ($Ttl -eq $null) {
            throw "invalid value for 'Ttl', 'Ttl' cannot be null."
        }

        if ($MaxAgeSeconds -eq $null) {
            throw "invalid value for 'MaxAgeSeconds', 'MaxAgeSeconds' cannot be null."
        }

        if ($MxRecords -eq $null) {
            throw "invalid value for 'MxRecords', 'MxRecords' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "host" = ${VarHost}
            "version" = ${Version}
            "mode" = ${Mode}
            "ttl" = ${Ttl}
            "maxAgeSeconds" = ${MaxAgeSeconds}
            "mxRecords" = ${MxRecords}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenerateMtaStsRecordOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenerateMtaStsRecordOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenerateMtaStsRecordOptions<PSCustomObject>
#>
function ConvertFrom-JsonToGenerateMtaStsRecordOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => GenerateMtaStsRecordOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenerateMtaStsRecordOptions
        $AllProperties = ("host", "version", "mode", "ttl", "maxAgeSeconds", "mxRecords")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'host' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host"))) {
            throw "Error! JSON cannot be serialized due to the required property 'host' missing."
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) {
            throw "Error! JSON cannot be serialized due to the required property 'version' missing."
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mode' missing."
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ttl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ttl' missing."
        } else {
            $Ttl = $JsonParameters.PSobject.Properties["ttl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxAgeSeconds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'maxAgeSeconds' missing."
        } else {
            $MaxAgeSeconds = $JsonParameters.PSobject.Properties["maxAgeSeconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mxRecords"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mxRecords' missing."
        } else {
            $MxRecords = $JsonParameters.PSobject.Properties["mxRecords"].value
        }

        $PSO = [PSCustomObject]@{
            "host" = ${VarHost}
            "version" = ${Version}
            "mode" = ${Mode}
            "ttl" = ${Ttl}
            "maxAgeSeconds" = ${MaxAgeSeconds}
            "mxRecords" = ${MxRecords}
        }

        return $PSO
    }

}

