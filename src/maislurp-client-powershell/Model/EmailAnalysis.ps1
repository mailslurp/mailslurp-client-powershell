#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message

.PARAMETER DkimVerdict
Verdict of DomainKeys Identified Mail analysis
.PARAMETER DmarcVerdict
Verdict of Domain-based Message Authentication Reporting and Conformance analysis
.PARAMETER SpamVerdict
Verdict of spam ranking analysis
.PARAMETER SpfVerdict
Verdict of Send Policy Framework record spoofing analysis
.PARAMETER VirusVerdict
Verdict of virus scan analysis
.OUTPUTS

EmailAnalysis<PSCustomObject>
#>

function Initialize-EmailAnalysis {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DkimVerdict},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DmarcVerdict},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpamVerdict},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpfVerdict},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirusVerdict}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => EmailAnalysis' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dkimVerdict" = ${DkimVerdict}
            "dmarcVerdict" = ${DmarcVerdict}
            "spamVerdict" = ${SpamVerdict}
            "spfVerdict" = ${SpfVerdict}
            "virusVerdict" = ${VirusVerdict}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailAnalysis<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailAnalysis<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailAnalysis<PSCustomObject>
#>
function ConvertFrom-JsonToEmailAnalysis {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => EmailAnalysis' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmailAnalysis
        $AllProperties = ("dkimVerdict", "dmarcVerdict", "spamVerdict", "spfVerdict", "virusVerdict")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dkimVerdict"))) { #optional property not found
            $DkimVerdict = $null
        } else {
            $DkimVerdict = $JsonParameters.PSobject.Properties["dkimVerdict"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dmarcVerdict"))) { #optional property not found
            $DmarcVerdict = $null
        } else {
            $DmarcVerdict = $JsonParameters.PSobject.Properties["dmarcVerdict"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spamVerdict"))) { #optional property not found
            $SpamVerdict = $null
        } else {
            $SpamVerdict = $JsonParameters.PSobject.Properties["spamVerdict"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spfVerdict"))) { #optional property not found
            $SpfVerdict = $null
        } else {
            $SpfVerdict = $JsonParameters.PSobject.Properties["spfVerdict"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virusVerdict"))) { #optional property not found
            $VirusVerdict = $null
        } else {
            $VirusVerdict = $JsonParameters.PSobject.Properties["virusVerdict"].value
        }

        $PSO = [PSCustomObject]@{
            "dkimVerdict" = ${DkimVerdict}
            "dmarcVerdict" = ${DmarcVerdict}
            "spamVerdict" = ${SpamVerdict}
            "spfVerdict" = ${SpfVerdict}
            "virusVerdict" = ${VirusVerdict}
        }

        return $PSO
    }

}

