#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OtpAuthUrl
No description available.
.PARAMETER Name
No description available.
.PARAMETER Username
No description available.
.PARAMETER Issuer
No description available.
.PARAMETER Digits
No description available.
.PARAMETER Period
No description available.
.PARAMETER Algorithm
No description available.
.OUTPUTS

CreateTotpDeviceOtpAuthUrlOptions<PSCustomObject>
#>

function Initialize-CreateTotpDeviceOtpAuthUrlOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OtpAuthUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Issuer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Digits},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Period},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Algorithm}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => CreateTotpDeviceOtpAuthUrlOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($OtpAuthUrl -eq $null) {
            throw "invalid value for 'OtpAuthUrl', 'OtpAuthUrl' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "otpAuthUrl" = ${OtpAuthUrl}
            "name" = ${Name}
            "username" = ${Username}
            "issuer" = ${Issuer}
            "digits" = ${Digits}
            "period" = ${Period}
            "algorithm" = ${Algorithm}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateTotpDeviceOtpAuthUrlOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateTotpDeviceOtpAuthUrlOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateTotpDeviceOtpAuthUrlOptions<PSCustomObject>
#>
function ConvertFrom-JsonToCreateTotpDeviceOtpAuthUrlOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => CreateTotpDeviceOtpAuthUrlOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateTotpDeviceOtpAuthUrlOptions
        $AllProperties = ("otpAuthUrl", "name", "username", "issuer", "digits", "period", "algorithm")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'otpAuthUrl' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "otpAuthUrl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'otpAuthUrl' missing."
        } else {
            $OtpAuthUrl = $JsonParameters.PSobject.Properties["otpAuthUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) { #optional property not found
            $Issuer = $null
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digits"))) { #optional property not found
            $Digits = $null
        } else {
            $Digits = $JsonParameters.PSobject.Properties["digits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) { #optional property not found
            $Period = $null
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "algorithm"))) { #optional property not found
            $Algorithm = $null
        } else {
            $Algorithm = $JsonParameters.PSobject.Properties["algorithm"].value
        }

        $PSO = [PSCustomObject]@{
            "otpAuthUrl" = ${OtpAuthUrl}
            "name" = ${Name}
            "username" = ${Username}
            "issuer" = ${Issuer}
            "digits" = ${Digits}
            "period" = ${Period}
            "algorithm" = ${Algorithm}
        }

        return $PSO
    }

}

