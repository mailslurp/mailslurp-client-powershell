#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PageIndex
Optional page index in list pagination
.PARAMETER PageSize
Optional page size in list pagination
.PARAMETER SortDirection
Optional createdAt sort direction ASC or DESC
.PARAMETER Favourite
Optionally filter results for favourites only
.PARAMETER Search
Optionally filter by search words partial matching ID, tags, name, and email address
.PARAMETER Tag
Optionally filter by tags. Will return inboxes that include given tags
.PARAMETER Since
Optional filter by created after given date time
.PARAMETER Before
Optional filter by created before given date time
.PARAMETER InboxType
Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
.PARAMETER InboxFunction
Optional filter by inbox function
.PARAMETER DomainId
Optional domain ID filter
.OUTPUTS

SearchInboxesOptions<PSCustomObject>
#>

function Initialize-SearchInboxesOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PageIndex},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PageSize},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ASC", "DESC")]
        [String]
        ${SortDirection},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Favourite},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Search},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tag},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Since},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Before},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("HTTP_INBOX", "SMTP_INBOX")]
        [String]
        ${InboxType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALIAS", "THREAD", "CATCH_ALL", "CONNECTOR")]
        [String]
        ${InboxFunction},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomainId}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => SearchInboxesOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "pageIndex" = ${PageIndex}
            "pageSize" = ${PageSize}
            "sortDirection" = ${SortDirection}
            "favourite" = ${Favourite}
            "search" = ${Search}
            "tag" = ${Tag}
            "since" = ${Since}
            "before" = ${Before}
            "inboxType" = ${InboxType}
            "inboxFunction" = ${InboxFunction}
            "domainId" = ${DomainId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SearchInboxesOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to SearchInboxesOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SearchInboxesOptions<PSCustomObject>
#>
function ConvertFrom-JsonToSearchInboxesOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => SearchInboxesOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SearchInboxesOptions
        $AllProperties = ("pageIndex", "pageSize", "sortDirection", "favourite", "search", "tag", "since", "before", "inboxType", "inboxFunction", "domainId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pageIndex"))) { #optional property not found
            $PageIndex = $null
        } else {
            $PageIndex = $JsonParameters.PSobject.Properties["pageIndex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pageSize"))) { #optional property not found
            $PageSize = $null
        } else {
            $PageSize = $JsonParameters.PSobject.Properties["pageSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortDirection"))) { #optional property not found
            $SortDirection = $null
        } else {
            $SortDirection = $JsonParameters.PSobject.Properties["sortDirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "favourite"))) { #optional property not found
            $Favourite = $null
        } else {
            $Favourite = $JsonParameters.PSobject.Properties["favourite"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "search"))) { #optional property not found
            $Search = $null
        } else {
            $Search = $JsonParameters.PSobject.Properties["search"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tag"))) { #optional property not found
            $Tag = $null
        } else {
            $Tag = $JsonParameters.PSobject.Properties["tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "since"))) { #optional property not found
            $Since = $null
        } else {
            $Since = $JsonParameters.PSobject.Properties["since"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "before"))) { #optional property not found
            $Before = $null
        } else {
            $Before = $JsonParameters.PSobject.Properties["before"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxType"))) { #optional property not found
            $InboxType = $null
        } else {
            $InboxType = $JsonParameters.PSobject.Properties["inboxType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxFunction"))) { #optional property not found
            $InboxFunction = $null
        } else {
            $InboxFunction = $JsonParameters.PSobject.Properties["inboxFunction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domainId"))) { #optional property not found
            $DomainId = $null
        } else {
            $DomainId = $JsonParameters.PSobject.Properties["domainId"].value
        }

        $PSO = [PSCustomObject]@{
            "pageIndex" = ${PageIndex}
            "pageSize" = ${PageSize}
            "sortDirection" = ${SortDirection}
            "favourite" = ${Favourite}
            "search" = ${Search}
            "tag" = ${Tag}
            "since" = ${Since}
            "before" = ${Before}
            "inboxType" = ${InboxType}
            "inboxFunction" = ${InboxFunction}
            "domainId" = ${DomainId}
        }

        return $PSO
    }

}

