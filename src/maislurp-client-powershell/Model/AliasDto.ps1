#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Email alias representation

.PARAMETER CreatedAt
No description available.
.PARAMETER EmailAddress
The alias's email address for receiving email
.PARAMETER Id
No description available.
.PARAMETER InboxId
Inbox that is associated with the alias
.PARAMETER IsVerified
Has the alias been verified. You must verify an alias if the masked email address has not yet been verified by your account
.PARAMETER MaskedEmailAddress
The underlying email address that is hidden and will received forwarded email
.PARAMETER Name
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER UseThreads
If alias will generate response threads or not when email are received by it
.PARAMETER UserId
No description available.
.OUTPUTS

AliasDto<PSCustomObject>
#>

function Initialize-AliasDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsVerified},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaskedEmailAddress},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdatedAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseThreads},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => AliasDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($UserId -eq $null) {
            throw "invalid value for 'UserId', 'UserId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "createdAt" = ${CreatedAt}
            "emailAddress" = ${EmailAddress}
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "isVerified" = ${IsVerified}
            "maskedEmailAddress" = ${MaskedEmailAddress}
            "name" = ${Name}
            "updatedAt" = ${UpdatedAt}
            "useThreads" = ${UseThreads}
            "userId" = ${UserId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AliasDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to AliasDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AliasDto<PSCustomObject>
#>
function ConvertFrom-JsonToAliasDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => AliasDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AliasDto
        $AllProperties = ("createdAt", "emailAddress", "id", "inboxId", "isVerified", "maskedEmailAddress", "name", "updatedAt", "useThreads", "userId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userId' missing."
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddress"))) { #optional property not found
            $EmailAddress = $null
        } else {
            $EmailAddress = $JsonParameters.PSobject.Properties["emailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) { #optional property not found
            $InboxId = $null
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isVerified"))) { #optional property not found
            $IsVerified = $null
        } else {
            $IsVerified = $JsonParameters.PSobject.Properties["isVerified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maskedEmailAddress"))) { #optional property not found
            $MaskedEmailAddress = $null
        } else {
            $MaskedEmailAddress = $JsonParameters.PSobject.Properties["maskedEmailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) { #optional property not found
            $UpdatedAt = $null
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useThreads"))) { #optional property not found
            $UseThreads = $null
        } else {
            $UseThreads = $JsonParameters.PSobject.Properties["useThreads"].value
        }

        $PSO = [PSCustomObject]@{
            "createdAt" = ${CreatedAt}
            "emailAddress" = ${EmailAddress}
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "isVerified" = ${IsVerified}
            "maskedEmailAddress" = ${MaskedEmailAddress}
            "name" = ${Name}
            "updatedAt" = ${UpdatedAt}
            "useThreads" = ${UseThreads}
            "userId" = ${UserId}
        }

        return $PSO
    }

}

