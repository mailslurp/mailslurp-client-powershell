#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Options for replying to an alias email using the alias inbox

.PARAMETER Attachments
List of uploaded attachments to send with the reply. Optional.
.PARAMETER Body
Body of the reply email you want to send
.PARAMETER Charset
The charset that your message should be sent with. Optional. Default is UTF-8
.PARAMETER IsHTML
Is the reply HTML
.PARAMETER SendStrategy
When to send the email. Typically immediately
.PARAMETER Template
Template ID to use instead of body. Will use template variable map to fill defined variable slots.
.PARAMETER TemplateVariables
Template variables if using a template
.OUTPUTS

ReplyToAliasEmailOptions<PSCustomObject>
#>

function Initialize-ReplyToAliasEmailOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Attachments},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Charset},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHTML},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SINGLE_MESSAGE")]
        [String]
        ${SendStrategy},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Template},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TemplateVariables}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ReplyToAliasEmailOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attachments" = ${Attachments}
            "body" = ${Body}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "sendStrategy" = ${SendStrategy}
            "template" = ${Template}
            "templateVariables" = ${TemplateVariables}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReplyToAliasEmailOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReplyToAliasEmailOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReplyToAliasEmailOptions<PSCustomObject>
#>
function ConvertFrom-JsonToReplyToAliasEmailOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ReplyToAliasEmailOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReplyToAliasEmailOptions
        $AllProperties = ("attachments", "body", "charset", "isHTML", "sendStrategy", "template", "templateVariables")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachments"))) { #optional property not found
            $Attachments = $null
        } else {
            $Attachments = $JsonParameters.PSobject.Properties["attachments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "charset"))) { #optional property not found
            $Charset = $null
        } else {
            $Charset = $JsonParameters.PSobject.Properties["charset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHTML"))) { #optional property not found
            $IsHTML = $null
        } else {
            $IsHTML = $JsonParameters.PSobject.Properties["isHTML"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sendStrategy"))) { #optional property not found
            $SendStrategy = $null
        } else {
            $SendStrategy = $JsonParameters.PSobject.Properties["sendStrategy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template"))) { #optional property not found
            $Template = $null
        } else {
            $Template = $JsonParameters.PSobject.Properties["template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateVariables"))) { #optional property not found
            $TemplateVariables = $null
        } else {
            $TemplateVariables = $JsonParameters.PSobject.Properties["templateVariables"].value
        }

        $PSO = [PSCustomObject]@{
            "attachments" = ${Attachments}
            "body" = ${Body}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "sendStrategy" = ${SendStrategy}
            "template" = ${Template}
            "templateVariables" = ${TemplateVariables}
        }

        return $PSO
    }

}

