#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

BOUNCE webhook payload. Sent to your webhook url endpoint via HTTP POST when an email bounced or was rejected by a recipient. Save the recipients to a ban list on your server and avoid emailing them again. It is recommended you also listen to the BOUNCE_RECIPIENT payload.

.PARAMETER MessageId
Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
.PARAMETER WebhookId
ID of webhook entity being triggered
.PARAMETER EventName
Name of the event type webhook is being triggered for.
.PARAMETER WebhookName
Name of the webhook being triggered
.PARAMETER BounceId
ID of the bounce email record. Use the ID with the bounce controller to view more information
.PARAMETER SentToRecipients
Email sent to recipients
.PARAMETER VarSender
Sender causing bounce
.PARAMETER BounceRecipients
Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation.
.OUTPUTS

WebhookBouncePayload<PSCustomObject>
#>

function Initialize-WebhookBouncePayload {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EMAIL_RECEIVED", "NEW_AI_TRANSFORM_RESULT", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS", "NEW_GUEST_USER")]
        [String]
        ${EventName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebhookName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BounceId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SentToRecipients},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarSender},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${BounceRecipients}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => WebhookBouncePayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($MessageId -eq $null) {
            throw "invalid value for 'MessageId', 'MessageId' cannot be null."
        }

        if ($WebhookId -eq $null) {
            throw "invalid value for 'WebhookId', 'WebhookId' cannot be null."
        }

        if ($EventName -eq $null) {
            throw "invalid value for 'EventName', 'EventName' cannot be null."
        }

        if ($BounceId -eq $null) {
            throw "invalid value for 'BounceId', 'BounceId' cannot be null."
        }

        if ($VarSender -eq $null) {
            throw "invalid value for 'VarSender', 'VarSender' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "eventName" = ${EventName}
            "webhookName" = ${WebhookName}
            "bounceId" = ${BounceId}
            "sentToRecipients" = ${SentToRecipients}
            "sender" = ${VarSender}
            "bounceRecipients" = ${BounceRecipients}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WebhookBouncePayload<PSCustomObject>

.DESCRIPTION

Convert from JSON to WebhookBouncePayload<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WebhookBouncePayload<PSCustomObject>
#>
function ConvertFrom-JsonToWebhookBouncePayload {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => WebhookBouncePayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WebhookBouncePayload
        $AllProperties = ("messageId", "webhookId", "eventName", "webhookName", "bounceId", "sentToRecipients", "sender", "bounceRecipients")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'messageId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messageId' missing."
        } else {
            $MessageId = $JsonParameters.PSobject.Properties["messageId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'webhookId' missing."
        } else {
            $WebhookId = $JsonParameters.PSobject.Properties["webhookId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'eventName' missing."
        } else {
            $EventName = $JsonParameters.PSobject.Properties["eventName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bounceId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bounceId' missing."
        } else {
            $BounceId = $JsonParameters.PSobject.Properties["bounceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sender"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sender' missing."
        } else {
            $VarSender = $JsonParameters.PSobject.Properties["sender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webhookName"))) { #optional property not found
            $WebhookName = $null
        } else {
            $WebhookName = $JsonParameters.PSobject.Properties["webhookName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sentToRecipients"))) { #optional property not found
            $SentToRecipients = $null
        } else {
            $SentToRecipients = $JsonParameters.PSobject.Properties["sentToRecipients"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bounceRecipients"))) { #optional property not found
            $BounceRecipients = $null
        } else {
            $BounceRecipients = $JsonParameters.PSobject.Properties["bounceRecipients"].value
        }

        $PSO = [PSCustomObject]@{
            "messageId" = ${MessageId}
            "webhookId" = ${WebhookId}
            "eventName" = ${EventName}
            "webhookName" = ${WebhookName}
            "bounceId" = ${BounceId}
            "sentToRecipients" = ${SentToRecipients}
            "sender" = ${VarSender}
            "bounceRecipients" = ${BounceRecipients}
        }

        return $PSO
    }

}

