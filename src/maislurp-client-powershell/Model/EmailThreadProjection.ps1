#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers

.PARAMETER Recipients
No description available.
.PARAMETER VarSender
No description available.
.PARAMETER InboxId
Inbox ID
.PARAMETER UserId
User ID
.PARAMETER UpdatedAt
Updated at DateTime
.PARAMETER CreatedAt
Created at DateTime
.PARAMETER To
To recipients
.PARAMETER Cc
CC recipients
.PARAMETER Bcc
BCC recipients
.PARAMETER HasAttachments
Has attachments
.PARAMETER Unread
Has unread
.PARAMETER MessageCount
Number of messages in the thread
.PARAMETER LastBodyExcerpt
Last body excerpt
.PARAMETER LastTextExcerpt
Last text excerpt
.PARAMETER LastCreatedAt
Last email created time
.PARAMETER LastFrom
Last sender
.PARAMETER LastSender
No description available.
.PARAMETER Subject
Thread topic subject
.PARAMETER Id
ID of email thread
.PARAMETER VarFrom
From sender
.OUTPUTS

EmailThreadProjection<PSCustomObject>
#>

function Initialize-EmailThreadProjection {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Recipients},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarSender},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${UpdatedAt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${To},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Cc},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Bcc},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${HasAttachments},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Unread},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${MessageCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastBodyExcerpt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastTextExcerpt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastCreatedAt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastFrom},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastSender},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => EmailThreadProjection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($UserId -eq $null) {
            throw "invalid value for 'UserId', 'UserId' cannot be null."
        }

        if ($UpdatedAt -eq $null) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($To -eq $null) {
            throw "invalid value for 'To', 'To' cannot be null."
        }

        if ($HasAttachments -eq $null) {
            throw "invalid value for 'HasAttachments', 'HasAttachments' cannot be null."
        }

        if ($Unread -eq $null) {
            throw "invalid value for 'Unread', 'Unread' cannot be null."
        }

        if ($MessageCount -eq $null) {
            throw "invalid value for 'MessageCount', 'MessageCount' cannot be null."
        }

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "recipients" = ${Recipients}
            "sender" = ${VarSender}
            "inboxId" = ${InboxId}
            "userId" = ${UserId}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
            "to" = ${To}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "hasAttachments" = ${HasAttachments}
            "unread" = ${Unread}
            "messageCount" = ${MessageCount}
            "lastBodyExcerpt" = ${LastBodyExcerpt}
            "lastTextExcerpt" = ${LastTextExcerpt}
            "lastCreatedAt" = ${LastCreatedAt}
            "lastFrom" = ${LastFrom}
            "lastSender" = ${LastSender}
            "subject" = ${Subject}
            "id" = ${Id}
            "from" = ${VarFrom}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailThreadProjection<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailThreadProjection<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailThreadProjection<PSCustomObject>
#>
function ConvertFrom-JsonToEmailThreadProjection {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => EmailThreadProjection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmailThreadProjection
        $AllProperties = ("recipients", "sender", "inboxId", "userId", "updatedAt", "createdAt", "to", "cc", "bcc", "hasAttachments", "unread", "messageCount", "lastBodyExcerpt", "lastTextExcerpt", "lastCreatedAt", "lastFrom", "lastSender", "subject", "id", "from")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'userId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userId' missing."
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updatedAt' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) {
            throw "Error! JSON cannot be serialized due to the required property 'to' missing."
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasAttachments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hasAttachments' missing."
        } else {
            $HasAttachments = $JsonParameters.PSobject.Properties["hasAttachments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unread"))) {
            throw "Error! JSON cannot be serialized due to the required property 'unread' missing."
        } else {
            $Unread = $JsonParameters.PSobject.Properties["unread"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageCount"))) {
            throw "Error! JSON cannot be serialized due to the required property 'messageCount' missing."
        } else {
            $MessageCount = $JsonParameters.PSobject.Properties["messageCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipients"))) { #optional property not found
            $Recipients = $null
        } else {
            $Recipients = $JsonParameters.PSobject.Properties["recipients"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sender"))) { #optional property not found
            $VarSender = $null
        } else {
            $VarSender = $JsonParameters.PSobject.Properties["sender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) { #optional property not found
            $InboxId = $null
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc"))) { #optional property not found
            $Cc = $null
        } else {
            $Cc = $JsonParameters.PSobject.Properties["cc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bcc"))) { #optional property not found
            $Bcc = $null
        } else {
            $Bcc = $JsonParameters.PSobject.Properties["bcc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastBodyExcerpt"))) { #optional property not found
            $LastBodyExcerpt = $null
        } else {
            $LastBodyExcerpt = $JsonParameters.PSobject.Properties["lastBodyExcerpt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastTextExcerpt"))) { #optional property not found
            $LastTextExcerpt = $null
        } else {
            $LastTextExcerpt = $JsonParameters.PSobject.Properties["lastTextExcerpt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastCreatedAt"))) { #optional property not found
            $LastCreatedAt = $null
        } else {
            $LastCreatedAt = $JsonParameters.PSobject.Properties["lastCreatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastFrom"))) { #optional property not found
            $LastFrom = $null
        } else {
            $LastFrom = $JsonParameters.PSobject.Properties["lastFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSender"))) { #optional property not found
            $LastSender = $null
        } else {
            $LastSender = $JsonParameters.PSobject.Properties["lastSender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        $PSO = [PSCustomObject]@{
            "recipients" = ${Recipients}
            "sender" = ${VarSender}
            "inboxId" = ${InboxId}
            "userId" = ${UserId}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
            "to" = ${To}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "hasAttachments" = ${HasAttachments}
            "unread" = ${Unread}
            "messageCount" = ${MessageCount}
            "lastBodyExcerpt" = ${LastBodyExcerpt}
            "lastTextExcerpt" = ${LastTextExcerpt}
            "lastCreatedAt" = ${LastCreatedAt}
            "lastFrom" = ${LastFrom}
            "lastSender" = ${LastSender}
            "subject" = ${Subject}
            "id" = ${Id}
            "from" = ${VarFrom}
        }

        return $PSO
    }

}

