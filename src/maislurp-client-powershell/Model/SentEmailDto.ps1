#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Sent email details

.PARAMETER Attachments
Array of IDs of attachments that were sent with this email
.PARAMETER Bcc
No description available.
.PARAMETER Body
No description available.
.PARAMETER BodyMD5Hash
MD5 Hash
.PARAMETER Cc
No description available.
.PARAMETER Charset
No description available.
.PARAMETER VarFrom
No description available.
.PARAMETER Id
ID of sent email
.PARAMETER InboxId
Inbox ID email was sent from
.PARAMETER IsHTML
No description available.
.PARAMETER PixelIds
No description available.
.PARAMETER ReplyTo
No description available.
.PARAMETER SentAt
No description available.
.PARAMETER Subject
No description available.
.PARAMETER To
Recipients email was sent to
.PARAMETER UserId
User ID
.OUTPUTS

SentEmailDto<PSCustomObject>
#>

function Initialize-SentEmailDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Attachments},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Bcc},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BodyMD5Hash},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Cc},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Charset},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHTML},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PixelIds},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplyTo},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${SentAt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${To},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => SentEmailDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($SentAt -eq $null) {
            throw "invalid value for 'SentAt', 'SentAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "attachments" = ${Attachments}
            "bcc" = ${Bcc}
            "body" = ${Body}
            "bodyMD5Hash" = ${BodyMD5Hash}
            "cc" = ${Cc}
            "charset" = ${Charset}
            "from" = ${VarFrom}
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "isHTML" = ${IsHTML}
            "pixelIds" = ${PixelIds}
            "replyTo" = ${ReplyTo}
            "sentAt" = ${SentAt}
            "subject" = ${Subject}
            "to" = ${To}
            "userId" = ${UserId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SentEmailDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SentEmailDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SentEmailDto<PSCustomObject>
#>
function ConvertFrom-JsonToSentEmailDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => SentEmailDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SentEmailDto
        $AllProperties = ("attachments", "bcc", "body", "bodyMD5Hash", "cc", "charset", "from", "id", "inboxId", "isHTML", "pixelIds", "replyTo", "sentAt", "subject", "to", "userId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'sentAt' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sentAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sentAt' missing."
        } else {
            $SentAt = $JsonParameters.PSobject.Properties["sentAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachments"))) { #optional property not found
            $Attachments = $null
        } else {
            $Attachments = $JsonParameters.PSobject.Properties["attachments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bcc"))) { #optional property not found
            $Bcc = $null
        } else {
            $Bcc = $JsonParameters.PSobject.Properties["bcc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bodyMD5Hash"))) { #optional property not found
            $BodyMD5Hash = $null
        } else {
            $BodyMD5Hash = $JsonParameters.PSobject.Properties["bodyMD5Hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc"))) { #optional property not found
            $Cc = $null
        } else {
            $Cc = $JsonParameters.PSobject.Properties["cc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "charset"))) { #optional property not found
            $Charset = $null
        } else {
            $Charset = $JsonParameters.PSobject.Properties["charset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) { #optional property not found
            $InboxId = $null
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHTML"))) { #optional property not found
            $IsHTML = $null
        } else {
            $IsHTML = $JsonParameters.PSobject.Properties["isHTML"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pixelIds"))) { #optional property not found
            $PixelIds = $null
        } else {
            $PixelIds = $JsonParameters.PSobject.Properties["pixelIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replyTo"))) { #optional property not found
            $ReplyTo = $null
        } else {
            $ReplyTo = $JsonParameters.PSobject.Properties["replyTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        $PSO = [PSCustomObject]@{
            "attachments" = ${Attachments}
            "bcc" = ${Bcc}
            "body" = ${Body}
            "bodyMD5Hash" = ${BodyMD5Hash}
            "cc" = ${Cc}
            "charset" = ${Charset}
            "from" = ${VarFrom}
            "id" = ${Id}
            "inboxId" = ${InboxId}
            "isHTML" = ${IsHTML}
            "pixelIds" = ${PixelIds}
            "replyTo" = ${ReplyTo}
            "sentAt" = ${SentAt}
            "subject" = ${Subject}
            "to" = ${To}
            "userId" = ${UserId}
        }

        return $PSO
    }

}

