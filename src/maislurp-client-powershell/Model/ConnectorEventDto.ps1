#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER ConnectorId
No description available.
.PARAMETER Status
No description available.
.PARAMETER EventType
No description available.
.PARAMETER Size
No description available.
.PARAMETER Message
No description available.
.PARAMETER Logs
No description available.
.PARAMETER Seen
No description available.
.PARAMETER CreatedAt
No description available.
.OUTPUTS

ConnectorEventDto<PSCustomObject>
#>

function Initialize-ConnectorEventDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectorId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SUCCESS", "INTERNAL_ERROR", "SUBSCRIPTION_ERROR", "CONNECTION_ERROR", "NOT_FOUND")]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SEND", "SYNC")]
        [String]
        ${EventType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Size},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Logs},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Seen},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => ConnectorEventDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($ConnectorId -eq $null) {
            throw "invalid value for 'ConnectorId', 'ConnectorId' cannot be null."
        }

        if ($Status -eq $null) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($EventType -eq $null) {
            throw "invalid value for 'EventType', 'EventType' cannot be null."
        }

        if ($Size -eq $null) {
            throw "invalid value for 'Size', 'Size' cannot be null."
        }

        if ($CreatedAt -eq $null) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "connectorId" = ${ConnectorId}
            "status" = ${Status}
            "eventType" = ${EventType}
            "size" = ${Size}
            "message" = ${Message}
            "logs" = ${Logs}
            "seen" = ${Seen}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorEventDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorEventDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorEventDto<PSCustomObject>
#>
function ConvertFrom-JsonToConnectorEventDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => ConnectorEventDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConnectorEventDto
        $AllProperties = ("id", "connectorId", "status", "eventType", "size", "message", "logs", "seen", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectorId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connectorId' missing."
        } else {
            $ConnectorId = $JsonParameters.PSobject.Properties["connectorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'eventType' missing."
        } else {
            $EventType = $JsonParameters.PSobject.Properties["eventType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) {
            throw "Error! JSON cannot be serialized due to the required property 'size' missing."
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logs"))) { #optional property not found
            $Logs = $null
        } else {
            $Logs = $JsonParameters.PSobject.Properties["logs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seen"))) { #optional property not found
            $Seen = $null
        } else {
            $Seen = $JsonParameters.PSobject.Properties["seen"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "connectorId" = ${ConnectorId}
            "status" = ${Status}
            "eventType" = ${EventType}
            "size" = ${Size}
            "message" = ${Message}
            "logs" = ${Logs}
            "seen" = ${Seen}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

