#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Options for updating an inbox replier

.PARAMETER InboxId
Inbox ID to attach replier to
.PARAMETER Name
Name for replier
.PARAMETER Field
Field to match against to trigger inbox replier for inbound email
.PARAMETER Match
String or wildcard style match for field specified when evaluating reply rules
.PARAMETER ReplyTo
Reply-to email address when sending replying
.PARAMETER Subject
Subject override when replying to email
.PARAMETER VarFrom
Send email from address
.PARAMETER Charset
Email reply charset
.PARAMETER IsHTML
Send HTML email
.PARAMETER IgnoreReplyTo
Ignore sender replyTo when responding. Send directly to the sender if enabled.
.PARAMETER Body
Email body for reply
.PARAMETER TemplateId
ID of template to use when sending a reply
.PARAMETER TemplateVariables
Template variable values
.OUTPUTS

UpdateInboxReplierOptions<PSCustomObject>
#>

function Initialize-UpdateInboxReplierOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RECIPIENTS", "SENDER", "SUBJECT", "ATTACHMENTS")]
        [String]
        ${Field},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Match},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReplyTo},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Charset},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHTML},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IgnoreReplyTo},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${TemplateVariables}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => UpdateInboxReplierOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($InboxId -eq $null) {
            throw "invalid value for 'InboxId', 'InboxId' cannot be null."
        }

        if ($Field -eq $null) {
            throw "invalid value for 'Field', 'Field' cannot be null."
        }

        if ($Match -eq $null) {
            throw "invalid value for 'Match', 'Match' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "inboxId" = ${InboxId}
            "name" = ${Name}
            "field" = ${Field}
            "match" = ${Match}
            "replyTo" = ${ReplyTo}
            "subject" = ${Subject}
            "from" = ${VarFrom}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "ignoreReplyTo" = ${IgnoreReplyTo}
            "body" = ${Body}
            "templateId" = ${TemplateId}
            "templateVariables" = ${TemplateVariables}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateInboxReplierOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateInboxReplierOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateInboxReplierOptions<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateInboxReplierOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => UpdateInboxReplierOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateInboxReplierOptions
        $AllProperties = ("inboxId", "name", "field", "match", "replyTo", "subject", "from", "charset", "isHTML", "ignoreReplyTo", "body", "templateId", "templateVariables")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'inboxId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inboxId' missing."
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) {
            throw "Error! JSON cannot be serialized due to the required property 'field' missing."
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "match"))) {
            throw "Error! JSON cannot be serialized due to the required property 'match' missing."
        } else {
            $Match = $JsonParameters.PSobject.Properties["match"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replyTo"))) { #optional property not found
            $ReplyTo = $null
        } else {
            $ReplyTo = $JsonParameters.PSobject.Properties["replyTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "charset"))) { #optional property not found
            $Charset = $null
        } else {
            $Charset = $JsonParameters.PSobject.Properties["charset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHTML"))) { #optional property not found
            $IsHTML = $null
        } else {
            $IsHTML = $JsonParameters.PSobject.Properties["isHTML"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignoreReplyTo"))) { #optional property not found
            $IgnoreReplyTo = $null
        } else {
            $IgnoreReplyTo = $JsonParameters.PSobject.Properties["ignoreReplyTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateId"))) { #optional property not found
            $TemplateId = $null
        } else {
            $TemplateId = $JsonParameters.PSobject.Properties["templateId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateVariables"))) { #optional property not found
            $TemplateVariables = $null
        } else {
            $TemplateVariables = $JsonParameters.PSobject.Properties["templateVariables"].value
        }

        $PSO = [PSCustomObject]@{
            "inboxId" = ${InboxId}
            "name" = ${Name}
            "field" = ${Field}
            "match" = ${Match}
            "replyTo" = ${ReplyTo}
            "subject" = ${Subject}
            "from" = ${VarFrom}
            "charset" = ${Charset}
            "isHTML" = ${IsHTML}
            "ignoreReplyTo" = ${IgnoreReplyTo}
            "body" = ${Body}
            "templateId" = ${TemplateId}
            "templateVariables" = ${TemplateVariables}
        }

        return $PSO
    }

}

