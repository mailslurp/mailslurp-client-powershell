#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Device
No description available.
.OUTPUTS

TotpDeviceOptionalDto<PSCustomObject>
#>

function Initialize-TotpDeviceOptionalDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Device}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => TotpDeviceOptionalDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "device" = ${Device}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TotpDeviceOptionalDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to TotpDeviceOptionalDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TotpDeviceOptionalDto<PSCustomObject>
#>
function ConvertFrom-JsonToTotpDeviceOptionalDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => TotpDeviceOptionalDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TotpDeviceOptionalDto
        $AllProperties = ("device")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) { #optional property not found
            $Device = $null
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        $PSO = [PSCustomObject]@{
            "device" = ${Device}
        }

        return $PSO
    }

}

