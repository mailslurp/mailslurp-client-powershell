#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Options for setting inbox favourite state

.PARAMETER State
Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering
.OUTPUTS

SetInboxFavouritedOptions<PSCustomObject>
#>

function Initialize-SetInboxFavouritedOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${State}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => SetInboxFavouritedOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SetInboxFavouritedOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to SetInboxFavouritedOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SetInboxFavouritedOptions<PSCustomObject>
#>
function ConvertFrom-JsonToSetInboxFavouritedOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => SetInboxFavouritedOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SetInboxFavouritedOptions
        $AllProperties = ("state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "state" = ${State}
        }

        return $PSO
    }

}

