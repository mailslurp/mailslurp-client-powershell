#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# Version: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Options for IMAP connection to external email inbox. Allows syncing emails iva IMAP.

.PARAMETER ImapSsl
No description available.
.PARAMETER ImapUsername
No description available.
.PARAMETER ImapPassword
No description available.
.PARAMETER SelectFolder
Optional folder to select during IMAP connection
.PARAMETER SearchTerms
No description available.
.PARAMETER ImapPort
IMAP server port
.PARAMETER ImapHost
IMAP server host
.PARAMETER Enabled
IMAP server enabled
.OUTPUTS

CreateConnectorImapConnectionOptions<PSCustomObject>
#>

function Initialize-CreateConnectorImapConnectionOptions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ImapSsl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapUsername},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapPassword},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelectFolder},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchTerms},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImapPort},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImapHost},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => CreateConnectorImapConnectionOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ImapHost -eq $null) {
            throw "invalid value for 'ImapHost', 'ImapHost' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "imapSsl" = ${ImapSsl}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "selectFolder" = ${SelectFolder}
            "searchTerms" = ${SearchTerms}
            "imapPort" = ${ImapPort}
            "imapHost" = ${ImapHost}
            "enabled" = ${Enabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateConnectorImapConnectionOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateConnectorImapConnectionOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateConnectorImapConnectionOptions<PSCustomObject>
#>
function ConvertFrom-JsonToCreateConnectorImapConnectionOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => CreateConnectorImapConnectionOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateConnectorImapConnectionOptions
        $AllProperties = ("imapSsl", "imapUsername", "imapPassword", "selectFolder", "searchTerms", "imapPort", "imapHost", "enabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'imapHost' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapHost"))) {
            throw "Error! JSON cannot be serialized due to the required property 'imapHost' missing."
        } else {
            $ImapHost = $JsonParameters.PSobject.Properties["imapHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapSsl"))) { #optional property not found
            $ImapSsl = $null
        } else {
            $ImapSsl = $JsonParameters.PSobject.Properties["imapSsl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapUsername"))) { #optional property not found
            $ImapUsername = $null
        } else {
            $ImapUsername = $JsonParameters.PSobject.Properties["imapUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPassword"))) { #optional property not found
            $ImapPassword = $null
        } else {
            $ImapPassword = $JsonParameters.PSobject.Properties["imapPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selectFolder"))) { #optional property not found
            $SelectFolder = $null
        } else {
            $SelectFolder = $JsonParameters.PSobject.Properties["selectFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchTerms"))) { #optional property not found
            $SearchTerms = $null
        } else {
            $SearchTerms = $JsonParameters.PSobject.Properties["searchTerms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imapPort"))) { #optional property not found
            $ImapPort = $null
        } else {
            $ImapPort = $JsonParameters.PSobject.Properties["imapPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "imapSsl" = ${ImapSsl}
            "imapUsername" = ${ImapUsername}
            "imapPassword" = ${ImapPassword}
            "selectFolder" = ${SelectFolder}
            "searchTerms" = ${SearchTerms}
            "imapPort" = ${ImapPort}
            "imapHost" = ${ImapHost}
            "enabled" = ${Enabled}
        }

        return $PSO
    }

}

