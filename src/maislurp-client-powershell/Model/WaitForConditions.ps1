#
# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# Version: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Conditions that a `waitForXEmails` endpoint operates on. The methods wait until given conditions are met or a timeout is reached. If the conditions are met without needing to wait the results will be returned immediately. Can include `unreadOnly` to ignore already read emails that were returned in an API call or viewing in the dashboard. Can also include matches for emails containing `from`, `subject`, `hasAttachments` etc.

.PARAMETER Count
Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation.
.PARAMETER CountType
How should the found count be compared to the expected count.
.PARAMETER InboxId
ID of inbox to search within and apply conditions to. Essentially filtering the emails found to give a count.
.PARAMETER VarMatches
Conditions that should be matched for an email to qualify for results. Each condition will be applied in order to each email within an inbox to filter a result list of matching emails you are waiting for.
.PARAMETER SortDirection
Direction to sort matching emails by created time
.PARAMETER Timeout
Max time in milliseconds to retry the `waitFor` operation until conditions are met.
.PARAMETER UnreadOnly
Apply conditions only to **unread** emails. All emails begin with `read=false`. An email is marked `read=true` when an `EmailDto` representation of it has been returned to the user at least once. For example you have called `getEmail` or `waitForLatestEmail` etc., or you have viewed the email in the dashboard. 
.OUTPUTS

WaitForConditions<PSCustomObject>
#>

function Initialize-WaitForConditions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EXACTLY", "ATLEAST")]
        [String]
        ${CountType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InboxId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VarMatches},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ASC", "DESC")]
        [String]
        ${SortDirection},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timeout},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UnreadOnly}
    )

    Process {
        'Creating PSCustomObject: maislurp-client-powershell => WaitForConditions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "countType" = ${CountType}
            "inboxId" = ${InboxId}
            "matches" = ${VarMatches}
            "sortDirection" = ${SortDirection}
            "timeout" = ${Timeout}
            "unreadOnly" = ${UnreadOnly}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WaitForConditions<PSCustomObject>

.DESCRIPTION

Convert from JSON to WaitForConditions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WaitForConditions<PSCustomObject>
#>
function ConvertFrom-JsonToWaitForConditions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: maislurp-client-powershell => WaitForConditions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WaitForConditions
        $AllProperties = ("count", "countType", "inboxId", "matches", "sortDirection", "timeout", "unreadOnly")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countType"))) { #optional property not found
            $CountType = $null
        } else {
            $CountType = $JsonParameters.PSobject.Properties["countType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inboxId"))) { #optional property not found
            $InboxId = $null
        } else {
            $InboxId = $JsonParameters.PSobject.Properties["inboxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matches"))) { #optional property not found
            $VarMatches = $null
        } else {
            $VarMatches = $JsonParameters.PSobject.Properties["matches"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortDirection"))) { #optional property not found
            $SortDirection = $null
        } else {
            $SortDirection = $JsonParameters.PSobject.Properties["sortDirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unreadOnly"))) { #optional property not found
            $UnreadOnly = $null
        } else {
            $UnreadOnly = $JsonParameters.PSobject.Properties["unreadOnly"].value
        }

        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "countType" = ${CountType}
            "inboxId" = ${InboxId}
            "matches" = ${VarMatches}
            "sortDirection" = ${SortDirection}
            "timeout" = ${Timeout}
            "unreadOnly" = ${UnreadOnly}
        }

        return $PSO
    }

}

